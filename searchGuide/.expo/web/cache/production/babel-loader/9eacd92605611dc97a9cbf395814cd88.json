{"ast":null,"code":"var _interopRequireWildcard=require(\"@babel/runtime/helpers/interopRequireWildcard\");var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=void 0;var _extends2=_interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));var _objectSpread2=_interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));var _objectWithoutProperties2=_interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));var _classCallCheck2=_interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));var _createClass2=_interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));var _possibleConstructorReturn2=_interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));var _getPrototypeOf3=_interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));var _inherits2=_interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));var React=_interopRequireWildcard(require(\"react\"));var _Animated=_interopRequireDefault(require(\"react-native-web/dist/exports/Animated\"));var _View=_interopRequireDefault(require(\"react-native-web/dist/exports/View\"));var _StyleSheet=_interopRequireDefault(require(\"react-native-web/dist/exports/StyleSheet\"));var _color=_interopRequireDefault(require(\"color\"));var _ActivityIndicator=_interopRequireDefault(require(\"./ActivityIndicator\"));var _Icon=_interopRequireDefault(require(\"./Icon\"));var _Surface=_interopRequireDefault(require(\"./Surface\"));var _Text=_interopRequireDefault(require(\"./Typography/Text\"));var _TouchableRipple=_interopRequireDefault(require(\"./TouchableRipple\"));var _colors=require(\"../styles/colors\");var _theming=require(\"../core/theming\");var _jsxFileName=\"/Users/satya/Workspace/Callstack/react-native-paper/src/components/Button.tsx\";var Button=function(_React$Component){(0,_inherits2.default)(Button,_React$Component);function Button(){var _getPrototypeOf2;var _this;(0,_classCallCheck2.default)(this,Button);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=(0,_possibleConstructorReturn2.default)(this,(_getPrototypeOf2=(0,_getPrototypeOf3.default)(Button)).call.apply(_getPrototypeOf2,[this].concat(args)));_this.state={elevation:new _Animated.default.Value(_this.props.mode==='contained'?2:0)};_this.handlePressIn=function(){if(_this.props.mode==='contained'){_Animated.default.timing(_this.state.elevation,{toValue:8,duration:200}).start();}};_this.handlePressOut=function(){if(_this.props.mode==='contained'){_Animated.default.timing(_this.state.elevation,{toValue:2,duration:150}).start();}};return _this;}(0,_createClass2.default)(Button,[{key:\"render\",value:function render(){var _this$props=this.props,disabled=_this$props.disabled,compact=_this$props.compact,mode=_this$props.mode,dark=_this$props.dark,loading=_this$props.loading,icon=_this$props.icon,buttonColor=_this$props.color,children=_this$props.children,uppercase=_this$props.uppercase,accessibilityLabel=_this$props.accessibilityLabel,onPress=_this$props.onPress,style=_this$props.style,theme=_this$props.theme,contentStyle=_this$props.contentStyle,labelStyle=_this$props.labelStyle,rest=(0,_objectWithoutProperties2.default)(_this$props,[\"disabled\",\"compact\",\"mode\",\"dark\",\"loading\",\"icon\",\"color\",\"children\",\"uppercase\",\"accessibilityLabel\",\"onPress\",\"style\",\"theme\",\"contentStyle\",\"labelStyle\"]);var colors=theme.colors,roundness=theme.roundness;var font=theme.fonts.medium;var backgroundColor,borderColor,textColor,borderWidth;if(mode==='contained'){if(disabled){backgroundColor=(0,_color.default)(theme.dark?_colors.white:_colors.black).alpha(0.12).rgb().string();}else if(buttonColor){backgroundColor=buttonColor;}else{backgroundColor=colors.primary;}}else{backgroundColor='transparent';}if(mode==='outlined'){borderColor=(0,_color.default)(theme.dark?_colors.white:_colors.black).alpha(0.29).rgb().string();borderWidth=_StyleSheet.default.hairlineWidth;}else{borderColor='transparent';borderWidth=0;}if(disabled){textColor=(0,_color.default)(theme.dark?_colors.white:_colors.black).alpha(0.32).rgb().string();}else if(mode==='contained'){var isDark;if(typeof dark==='boolean'){isDark=dark;}else{isDark=backgroundColor==='transparent'?false:!(0,_color.default)(backgroundColor).isLight();}textColor=isDark?_colors.white:_colors.black;}else if(buttonColor){textColor=buttonColor;}else{textColor=colors.primary;}var rippleColor=(0,_color.default)(textColor).alpha(0.32).rgb().string();var buttonStyle={backgroundColor:backgroundColor,borderColor:borderColor,borderWidth:borderWidth,borderRadius:roundness};var touchableStyle={borderRadius:style?_StyleSheet.default.flatten(style).borderRadius||roundness:roundness};var textStyle=(0,_objectSpread2.default)({color:textColor},font);var elevation=disabled||mode!=='contained'?0:this.state.elevation;return React.createElement(_Surface.default,(0,_extends2.default)({},rest,{style:[styles.button,compact&&styles.compact,{elevation:elevation},buttonStyle,style],__source:{fileName:_jsxFileName,lineNumber:244}}),React.createElement(_TouchableRipple.default,{borderless:true,delayPressIn:0,onPress:onPress,onPressIn:this.handlePressIn,onPressOut:this.handlePressOut,accessibilityLabel:accessibilityLabel,accessibilityTraits:disabled?['button','disabled']:'button',accessibilityComponentType:\"button\",accessibilityRole:\"button\",accessibilityStates:disabled?['disabled']:[],disabled:disabled,rippleColor:rippleColor,style:touchableStyle,__source:{fileName:_jsxFileName,lineNumber:254}},React.createElement(_View.default,{style:[styles.content,contentStyle],__source:{fileName:_jsxFileName,lineNumber:269}},icon&&loading!==true?React.createElement(_View.default,{style:styles.icon,__source:{fileName:_jsxFileName,lineNumber:271}},React.createElement(_Icon.default,{source:icon,size:16,color:textColor,__source:{fileName:_jsxFileName,lineNumber:272}})):null,loading?React.createElement(_ActivityIndicator.default,{size:16,color:textColor,style:styles.icon,__source:{fileName:_jsxFileName,lineNumber:276}}):null,React.createElement(_Text.default,{numberOfLines:1,style:[styles.label,compact&&styles.compactLabel,uppercase&&styles.uppercaseLabel,textStyle,font,labelStyle],__source:{fileName:_jsxFileName,lineNumber:282}},children))));}}]);return Button;}(React.Component);Button.defaultProps={mode:'text',uppercase:true};var styles=_StyleSheet.default.create({button:{minWidth:64,borderStyle:'solid'},compact:{minWidth:'auto'},content:{flexDirection:'row',alignItems:'center',justifyContent:'center'},icon:{width:16,marginLeft:12,marginRight:-4},label:{textAlign:'center',letterSpacing:1,marginVertical:9,marginHorizontal:16},compactLabel:{marginHorizontal:8},uppercaseLabel:{textTransform:'uppercase'}});var _default=(0,_theming.withTheme)(Button);exports.default=_default;","map":{"version":3,"sources":["Button.tsx"],"names":["Button","React","Component","defaultProps","mode","uppercase","state","elevation","Animated","handlePressIn","toValue","duration","handlePressOut","disabled","compact","dark","loading","icon","buttonColor","children","accessibilityLabel","onPress","style","theme","contentStyle","labelStyle","rest","colors","roundness","font","backgroundColor","color","borderColor","borderWidth","StyleSheet","textColor","isDark","rippleColor","buttonStyle","borderRadius","touchableStyle","textStyle","styles","button","minWidth","borderStyle","content","flexDirection","alignItems","justifyContent","width","marginLeft","marginRight","label","textAlign","letterSpacing","marginVertical","marginHorizontal","compactLabel","uppercaseLabel","textTransform","withTheme"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n} from 'react-native';\nimport color from 'color';\n\nimport ActivityIndicator from './ActivityIndicator';\nimport Icon, { IconSource } from './Icon';\nimport Surface from './Surface';\nimport Text from './Typography/Text';\nimport TouchableRipple from './TouchableRipple';\nimport { black, white } from '../styles/colors';\nimport { withTheme } from '../core/theming';\n\nimport { Theme } from '../types';\n\ntype Props = React.ComponentProps<typeof Surface> & {\n  /**\n   * Mode of the button. You can change the mode to adjust the styling to give it desired emphasis.\n   * - `text` - flat button without background or outline (low emphasis)\n   * - `outlined` - button with an outline (medium emphasis)\n   * - `contained` - button with a background color and elevation shadow (high emphasis)\n   */\n  mode?: 'text' | 'outlined' | 'contained';\n  /**\n   * Whether the color is a dark color. A dark button will render light text and vice-versa. Only applicable for `contained` mode.\n   */\n  dark?: boolean;\n  /**\n   * Use a compact look, useful for `text` buttons in a row.\n   */\n  compact?: boolean;\n  /**\n   * Custom text color for flat button, or background color for contained button.\n   */\n  color?: string;\n  /**\n   * Whether to show a loading indicator.\n   */\n  loading?: boolean;\n  /**\n   * Icon to display for the `Button`.\n   */\n  icon?: IconSource;\n  /**\n   * Whether the button is disabled. A disabled button is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Label text of the button.\n   */\n  children: React.ReactNode;\n  /**\n   * Make the label text uppercased. Note that this won't work if you pass React elements as children.\n   */\n  uppercase?: boolean;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Style of button's inner content.\n   * Use this prop to apply custom height and width.\n   */\n  contentStyle?: StyleProp<ViewStyle>;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style for the button text.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\ntype State = {\n  elevation: Animated.Value;\n};\n\n/**\n * A button is component that the user can press to trigger an action.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/button-1.png\" />\n *     <figcaption>Text button</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/button-2.png\" />\n *     <figcaption>Outlined button</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/button-3.png\" />\n *     <figcaption>Contained button</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Button } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Button icon=\"camera\" mode=\"contained\" onPress={() => console.log('Pressed')}>\n *     Press me\n *   </Button>\n * );\n *\n * export default MyComponent;\n * ```\n */\nclass Button extends React.Component<Props, State> {\n  static defaultProps: Partial<Props> = {\n    mode: 'text',\n    uppercase: true,\n  };\n\n  state = {\n    elevation: new Animated.Value(this.props.mode === 'contained' ? 2 : 0),\n  };\n\n  private handlePressIn = () => {\n    if (this.props.mode === 'contained') {\n      Animated.timing(this.state.elevation, {\n        toValue: 8,\n        duration: 200,\n      }).start();\n    }\n  };\n\n  private handlePressOut = () => {\n    if (this.props.mode === 'contained') {\n      Animated.timing(this.state.elevation, {\n        toValue: 2,\n        duration: 150,\n      }).start();\n    }\n  };\n\n  render() {\n    const {\n      disabled,\n      compact,\n      mode,\n      dark,\n      loading,\n      icon,\n      color: buttonColor,\n      children,\n      uppercase,\n      accessibilityLabel,\n      onPress,\n      style,\n      theme,\n      contentStyle,\n      labelStyle,\n      ...rest\n    } = this.props;\n    const { colors, roundness } = theme;\n    const font = theme.fonts.medium;\n\n    let backgroundColor, borderColor, textColor, borderWidth;\n\n    if (mode === 'contained') {\n      if (disabled) {\n        backgroundColor = color(theme.dark ? white : black)\n          .alpha(0.12)\n          .rgb()\n          .string();\n      } else if (buttonColor) {\n        backgroundColor = buttonColor;\n      } else {\n        backgroundColor = colors.primary;\n      }\n    } else {\n      backgroundColor = 'transparent';\n    }\n\n    if (mode === 'outlined') {\n      borderColor = color(theme.dark ? white : black)\n        .alpha(0.29)\n        .rgb()\n        .string();\n      borderWidth = StyleSheet.hairlineWidth;\n    } else {\n      borderColor = 'transparent';\n      borderWidth = 0;\n    }\n\n    if (disabled) {\n      textColor = color(theme.dark ? white : black)\n        .alpha(0.32)\n        .rgb()\n        .string();\n    } else if (mode === 'contained') {\n      let isDark;\n\n      if (typeof dark === 'boolean') {\n        isDark = dark;\n      } else {\n        isDark =\n          backgroundColor === 'transparent'\n            ? false\n            : !color(backgroundColor).isLight();\n      }\n\n      textColor = isDark ? white : black;\n    } else if (buttonColor) {\n      textColor = buttonColor;\n    } else {\n      textColor = colors.primary;\n    }\n\n    const rippleColor = color(textColor)\n      .alpha(0.32)\n      .rgb()\n      .string();\n    const buttonStyle = {\n      backgroundColor,\n      borderColor,\n      borderWidth,\n      borderRadius: roundness,\n    };\n    const touchableStyle = {\n      borderRadius: style\n        ? StyleSheet.flatten(style).borderRadius || roundness\n        : roundness,\n    };\n    const textStyle = { color: textColor, ...font };\n    const elevation =\n      disabled || mode !== 'contained' ? 0 : this.state.elevation;\n\n    return (\n      <Surface\n        {...rest}\n        style={[\n          styles.button,\n          compact && styles.compact,\n          { elevation } as ViewStyle,\n          buttonStyle,\n          style,\n        ]}\n      >\n        <TouchableRipple\n          borderless\n          delayPressIn={0}\n          onPress={onPress}\n          onPressIn={this.handlePressIn}\n          onPressOut={this.handlePressOut}\n          accessibilityLabel={accessibilityLabel}\n          accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n          accessibilityComponentType=\"button\"\n          accessibilityRole=\"button\"\n          accessibilityStates={disabled ? ['disabled'] : []}\n          disabled={disabled}\n          rippleColor={rippleColor}\n          style={touchableStyle}\n        >\n          <View style={[styles.content, contentStyle]}>\n            {icon && loading !== true ? (\n              <View style={styles.icon}>\n                <Icon source={icon} size={16} color={textColor} />\n              </View>\n            ) : null}\n            {loading ? (\n              <ActivityIndicator\n                size={16}\n                color={textColor}\n                style={styles.icon}\n              />\n            ) : null}\n            <Text\n              numberOfLines={1}\n              style={[\n                styles.label,\n                compact && styles.compactLabel,\n                uppercase && styles.uppercaseLabel,\n                textStyle,\n                font,\n                labelStyle,\n              ]}\n            >\n              {children}\n            </Text>\n          </View>\n        </TouchableRipple>\n      </Surface>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  button: {\n    minWidth: 64,\n    borderStyle: 'solid',\n  },\n  compact: {\n    minWidth: 'auto',\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  icon: {\n    width: 16,\n    marginLeft: 12,\n    marginRight: -4,\n  },\n  label: {\n    textAlign: 'center',\n    letterSpacing: 1,\n    marginVertical: 9,\n    marginHorizontal: 16,\n  },\n  compactLabel: {\n    marginHorizontal: 8,\n  },\n  uppercaseLabel: {\n    textTransform: 'uppercase',\n  },\n});\n\nexport default withTheme(Button);\n"]},"metadata":{},"sourceType":"script"}