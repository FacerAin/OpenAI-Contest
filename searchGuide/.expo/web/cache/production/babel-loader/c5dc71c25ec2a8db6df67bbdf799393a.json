{"ast":null,"code":"Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=void 0;var accessibilityComponentTypeToRole={button:'button',none:'presentation'};var accessibilityTraitsToRole={adjustable:'slider',button:'button',header:'heading',image:'img',link:'link',none:'presentation',search:'search',summary:'region'};var accessibilityRoleToWebRole={adjustable:'slider',button:'button',header:'heading',image:'img',imagebutton:null,keyboardkey:null,label:null,link:'link',none:'presentation',search:'search',summary:'region',text:null};var propsToAriaRole=function propsToAriaRole(_ref){var accessibilityComponentType=_ref.accessibilityComponentType,accessibilityRole=_ref.accessibilityRole,accessibilityTraits=_ref.accessibilityTraits;if(accessibilityRole){var inferredRole=accessibilityRoleToWebRole[accessibilityRole];if(inferredRole!==null){return inferredRole||accessibilityRole;}}if(accessibilityTraits){var trait=Array.isArray(accessibilityTraits)?accessibilityTraits[0]:accessibilityTraits;return accessibilityTraitsToRole[trait];}if(accessibilityComponentType){return accessibilityComponentTypeToRole[accessibilityComponentType];}};var _default=propsToAriaRole;exports.default=_default;","map":{"version":3,"sources":["C:/Users/bluej/Desktop/2_2/searchGuide/searchGuide/node_modules/react-native-web/dist/modules/AccessibilityUtil/propsToAriaRole.js"],"names":["accessibilityComponentTypeToRole","button","none","accessibilityTraitsToRole","adjustable","header","image","link","search","summary","accessibilityRoleToWebRole","imagebutton","keyboardkey","label","text","propsToAriaRole","_ref","accessibilityComponentType","accessibilityRole","accessibilityTraits","inferredRole","trait","Array","isArray"],"mappings":"gFAQA,GAAIA,CAAAA,gCAAgC,CAAG,CACrCC,MAAM,CAAE,QAD6B,CAErCC,IAAI,CAAE,cAF+B,CAAvC,CAIA,GAAIC,CAAAA,yBAAyB,CAAG,CAC9BC,UAAU,CAAE,QADkB,CAE9BH,MAAM,CAAE,QAFsB,CAG9BI,MAAM,CAAE,SAHsB,CAI9BC,KAAK,CAAE,KAJuB,CAK9BC,IAAI,CAAE,MALwB,CAM9BL,IAAI,CAAE,cANwB,CAO9BM,MAAM,CAAE,QAPsB,CAQ9BC,OAAO,CAAE,QARqB,CAAhC,CAUA,GAAIC,CAAAA,0BAA0B,CAAG,CAC/BN,UAAU,CAAE,QADmB,CAE/BH,MAAM,CAAE,QAFuB,CAG/BI,MAAM,CAAE,SAHuB,CAI/BC,KAAK,CAAE,KAJwB,CAK/BK,WAAW,CAAE,IALkB,CAM/BC,WAAW,CAAE,IANkB,CAO/BC,KAAK,CAAE,IAPwB,CAQ/BN,IAAI,CAAE,MARyB,CAS/BL,IAAI,CAAE,cATyB,CAU/BM,MAAM,CAAE,QAVuB,CAW/BC,OAAO,CAAE,QAXsB,CAY/BK,IAAI,CAAE,IAZyB,CAAjC,CAoBA,GAAIC,CAAAA,eAAe,CAAG,QAASA,CAAAA,eAAT,CAAyBC,IAAzB,CAA+B,CACnD,GAAIC,CAAAA,0BAA0B,CAAGD,IAAI,CAACC,0BAAtC,CACIC,iBAAiB,CAAGF,IAAI,CAACE,iBAD7B,CAEIC,mBAAmB,CAAGH,IAAI,CAACG,mBAF/B,CAIA,GAAID,iBAAJ,CAAuB,CACrB,GAAIE,CAAAA,YAAY,CAAGV,0BAA0B,CAACQ,iBAAD,CAA7C,CAEA,GAAIE,YAAY,GAAK,IAArB,CAA2B,CAEzB,MAAOA,CAAAA,YAAY,EAAIF,iBAAvB,CACD,CACF,CAED,GAAIC,mBAAJ,CAAyB,CACvB,GAAIE,CAAAA,KAAK,CAAGC,KAAK,CAACC,OAAN,CAAcJ,mBAAd,EAAqCA,mBAAmB,CAAC,CAAD,CAAxD,CAA8DA,mBAA1E,CACA,MAAOhB,CAAAA,yBAAyB,CAACkB,KAAD,CAAhC,CACD,CAED,GAAIJ,0BAAJ,CAAgC,CAC9B,MAAOjB,CAAAA,gCAAgC,CAACiB,0BAAD,CAAvC,CACD,CACF,CAtBD,C,aAwBeF,e","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nvar accessibilityComponentTypeToRole = {\n  button: 'button',\n  none: 'presentation'\n};\nvar accessibilityTraitsToRole = {\n  adjustable: 'slider',\n  button: 'button',\n  header: 'heading',\n  image: 'img',\n  link: 'link',\n  none: 'presentation',\n  search: 'search',\n  summary: 'region'\n};\nvar accessibilityRoleToWebRole = {\n  adjustable: 'slider',\n  button: 'button',\n  header: 'heading',\n  image: 'img',\n  imagebutton: null,\n  keyboardkey: null,\n  label: null,\n  link: 'link',\n  none: 'presentation',\n  search: 'search',\n  summary: 'region',\n  text: null\n};\n/**\n * Provides compatibility with React Native's \"accessibilityTraits\" (iOS) and\n * \"accessibilityComponentType\" (Android), converting them to equivalent ARIA\n * roles.\n */\n\nvar propsToAriaRole = function propsToAriaRole(_ref) {\n  var accessibilityComponentType = _ref.accessibilityComponentType,\n      accessibilityRole = _ref.accessibilityRole,\n      accessibilityTraits = _ref.accessibilityTraits;\n\n  if (accessibilityRole) {\n    var inferredRole = accessibilityRoleToWebRole[accessibilityRole];\n\n    if (inferredRole !== null) {\n      // ignore roles that don't map to web\n      return inferredRole || accessibilityRole;\n    }\n  }\n\n  if (accessibilityTraits) {\n    var trait = Array.isArray(accessibilityTraits) ? accessibilityTraits[0] : accessibilityTraits;\n    return accessibilityTraitsToRole[trait];\n  }\n\n  if (accessibilityComponentType) {\n    return accessibilityComponentTypeToRole[accessibilityComponentType];\n  }\n};\n\nexport default propsToAriaRole;"]},"metadata":{},"sourceType":"script"}