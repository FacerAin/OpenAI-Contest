{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=void 0;var _reactIs=require(\"react-is\");var _invariant=_interopRequireDefault(require(\"../utils/invariant\"));function validateRouteConfigMap(routeConfigs){var routeNames=Object.keys(routeConfigs);(0,_invariant.default)(routeNames.length>0,'Please specify at least one route when configuring a navigator.');routeNames.forEach(function(routeName){var routeConfig=routeConfigs[routeName];var screenComponent=getScreenComponent(routeConfig);if(!screenComponent||!(0,_reactIs.isValidElementType)(screenComponent)&&!routeConfig.getScreen){throw new Error(\"The component for route '\"+routeName+\"' must be a React component. For example:\\n\\nimport MyScreen from './MyScreen';\\n...\\n\"+routeName+\": MyScreen,\\n}\\n\\nYou can also use a navigator:\\n\\nimport MyNavigator from './MyNavigator';\\n...\\n\"+routeName+\": MyNavigator,\\n}\");}if(routeConfig.screen&&routeConfig.getScreen){throw new Error(\"Route '\"+routeName+\"' should declare a screen or a getScreen, not both.\");}});}function getScreenComponent(routeConfig){if(!routeConfig){return null;}return routeConfig.screen?routeConfig.screen:routeConfig;}var _default=validateRouteConfigMap;exports.default=_default;","map":{"version":3,"sources":["validateRouteConfigMap.js"],"names":["routeNames","Object","invariant","routeConfig","routeConfigs","screenComponent","getScreenComponent","isValidElementType"],"mappings":"mKAAA,iCAEA,qEAMA,QAAA,CAAA,sBAAA,CAAA,YAAA,CAA8C,CAC5C,GAAMA,CAAAA,UAAU,CAAGC,MAAM,CAANA,IAAAA,CAAnB,YAAmBA,CAAnB,CACAC,uBACEF,UAAU,CAAVA,MAAAA,CADO,CAATE,CAAAA,iEAAAA,EAKAF,UAAU,CAAVA,OAAAA,CAAmB,SAAA,SAAA,CAAa,CAC9B,GAAMG,CAAAA,WAAW,CAAGC,YAAY,CAAhC,SAAgC,CAAhC,CACA,GAAMC,CAAAA,eAAe,CAAGC,kBAAkB,CAA1C,WAA0C,CAA1C,CAEA,GACE,CAAA,eAAA,EACC,CAACC,gCAAD,eAACA,CAAD,EAAwC,CAACJ,WAAW,CAFvD,SAAA,CAGE,CACA,KAAM,IAAA,CAAA,KAAA,CAAA,4BAAA,SAAA,CAAA,wFAAA,CAAA,SAAA,CAAA,oGAAA,CAAA,SAAA,CAAN,mBAAM,CAAN,CAeF,IAAIA,WAAW,CAAXA,MAAAA,EAAsBA,WAAW,CAArC,SAAA,CAAiD,CAC/C,KAAM,IAAA,CAAA,KAAA,CAAA,UAAA,SAAA,CAAN,qDAAM,CAAN,CAIH,CA5BDH,CAAAA,EA+BF,SAAA,CAAA,kBAAA,CAAA,WAAA,CAAyC,CACvC,GAAI,CAAJ,WAAA,CAAkB,CAChB,MAAA,KAAA,CAGF,OAAOG,CAAAA,WAAW,CAAXA,MAAAA,CAAqBA,WAAW,CAAhCA,MAAAA,CAAP,WAAA,CAGF,C,aAAA,sB","sourcesContent":["import { isValidElementType } from 'react-is';\n\nimport invariant from '../utils/invariant';\n\n/**\n * Make sure the config passed e.g. to StackRouter, TabRouter has\n * the correct format, and throw a clear error if it doesn't.\n */\nfunction validateRouteConfigMap(routeConfigs) {\n  const routeNames = Object.keys(routeConfigs);\n  invariant(\n    routeNames.length > 0,\n    'Please specify at least one route when configuring a navigator.'\n  );\n\n  routeNames.forEach(routeName => {\n    const routeConfig = routeConfigs[routeName];\n    const screenComponent = getScreenComponent(routeConfig);\n\n    if (\n      !screenComponent ||\n      (!isValidElementType(screenComponent) && !routeConfig.getScreen)\n    ) {\n      throw new Error(`The component for route '${routeName}' must be a React component. For example:\n\nimport MyScreen from './MyScreen';\n...\n${routeName}: MyScreen,\n}\n\nYou can also use a navigator:\n\nimport MyNavigator from './MyNavigator';\n...\n${routeName}: MyNavigator,\n}`);\n    }\n\n    if (routeConfig.screen && routeConfig.getScreen) {\n      throw new Error(\n        `Route '${routeName}' should declare a screen or a getScreen, not both.`\n      );\n    }\n  });\n}\n\nfunction getScreenComponent(routeConfig) {\n  if (!routeConfig) {\n    return null;\n  }\n\n  return routeConfig.screen ? routeConfig.screen : routeConfig;\n}\n\nexport default validateRouteConfigMap;\n"]},"metadata":{},"sourceType":"script"}