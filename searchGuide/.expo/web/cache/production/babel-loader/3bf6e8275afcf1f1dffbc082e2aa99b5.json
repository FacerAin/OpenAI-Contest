{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=void 0;var _regenerator=_interopRequireDefault(require(\"@babel/runtime/regenerator\"));var _ExecutionEnvironment=require(\"fbjs/lib/ExecutionEnvironment\");var _uaParserJs=_interopRequireDefault(require(\"ua-parser-js\"));var _v=_interopRequireDefault(require(\"uuid/v4\"));var parser=new _uaParserJs.default();var ID_KEY='EXPO_CONSTANTS_INSTALLATION_ID';var _sessionId=(0,_v.default)();var _default={get name(){return'ExponentConstants';},get appOwnership(){return'expo';},get installationId(){var installationId;try{installationId=localStorage.getItem(ID_KEY);if(installationId==null||typeof installationId!=='string'){installationId=(0,_v.default)();localStorage.setItem(ID_KEY,installationId);}}catch(error){installationId=_sessionId;}finally{return installationId;}},get sessionId(){return _sessionId;},get platform(){return{web:_ExecutionEnvironment.canUseDOM?(0,_uaParserJs.default)(navigator.userAgent):undefined};},get isHeadless(){return false;},get isDevice(){return true;},get isDetached(){return false;},get expoVersion(){return this.manifest.sdkVersion||null;},get linkingUri(){if(_ExecutionEnvironment.canUseDOM){return location.origin+location.pathname;}else{return'';}},get expoRuntimeVersion(){return this.expoVersion;},get deviceName(){var _parser$getResult=parser.getResult(),browser=_parser$getResult.browser,engine=_parser$getResult.engine,OS=_parser$getResult.os;return browser.name||engine.name||OS.name||undefined;},get nativeAppVersion(){return null;},get nativeBuildVersion(){return null;},get systemFonts(){return[];},get statusBarHeight(){return 0;},get deviceYearClass(){return null;},get manifest(){return process.env.APP_MANIFEST||{};},get experienceUrl(){if(_ExecutionEnvironment.canUseDOM){return location.origin+location.pathname;}else{return'';}},get debugMode(){return __DEV__;},getWebViewUserAgentAsync:function getWebViewUserAgentAsync(){return _regenerator.default.async(function getWebViewUserAgentAsync$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!_ExecutionEnvironment.canUseDOM){_context.next=4;break;}return _context.abrupt(\"return\",navigator.userAgent);case 4:return _context.abrupt(\"return\",null);case 5:case\"end\":return _context.stop();}}});}};exports.default=_default;","map":{"version":3,"sources":["../src/ExponentConstants.web.ts"],"names":[],"mappings":"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","sourcesContent":["import { canUseDOM } from 'fbjs/lib/ExecutionEnvironment';\nimport UAParser from 'ua-parser-js';\nimport uuidv4 from 'uuid/v4';\n\nimport { PlatformManifest, WebManifest, NativeConstants } from './Constants.types';\n\nconst parser = new UAParser();\nconst ID_KEY = 'EXPO_CONSTANTS_INSTALLATION_ID';\n\ndeclare var __DEV__: boolean;\ndeclare var process: { env: any };\ndeclare var navigator: Navigator;\ndeclare var location: Location;\ndeclare var localStorage: Storage;\n\nconst _sessionId = uuidv4();\n\nexport default {\n  get name(): string {\n    return 'ExponentConstants';\n  },\n  get appOwnership(): 'expo' {\n    return 'expo';\n  },\n  get installationId(): string {\n    let installationId;\n    try {\n      installationId = localStorage.getItem(ID_KEY);\n      if (installationId == null || typeof installationId !== 'string') {\n        installationId = uuidv4();\n        localStorage.setItem(ID_KEY, installationId as string);\n      }\n    } catch (error) {\n      installationId = _sessionId;\n    } finally {\n      return installationId;\n    }\n  },\n  get sessionId(): string {\n    return _sessionId;\n  },\n  get platform(): PlatformManifest {\n    return { web: canUseDOM ? UAParser(navigator.userAgent) : undefined };\n  },\n  get isHeadless(): false {\n    return false;\n  },\n  get isDevice(): true {\n    // TODO: Bacon: Possibly want to add information regarding simulators\n    return true;\n  },\n  get isDetached(): false {\n    return false;\n  },\n  get expoVersion(): string | null {\n    return this.manifest.sdkVersion || null;\n  },\n  get linkingUri(): string {\n    if (canUseDOM) {\n      // On native this is `exp://`\n      return location.origin + location.pathname;\n    } else {\n      return '';\n    }\n  },\n  get expoRuntimeVersion(): string | null {\n    return this.expoVersion;\n  },\n  get deviceName(): string | undefined {\n    const { browser, engine, os: OS } = parser.getResult();\n\n    return browser.name || engine.name || OS.name || undefined;\n  },\n  get nativeAppVersion(): null {\n    return null;\n  },\n  get nativeBuildVersion(): null {\n    return null;\n  },\n  get systemFonts(): string[] {\n    // TODO: Bacon: Maybe possible.\n    return [];\n  },\n  get statusBarHeight(): number {\n    return 0;\n  },\n  get deviceYearClass(): number | null {\n    // TODO: Bacon: The android version isn't very accurate either, maybe we could try and guess this value.\n    return null;\n  },\n  get manifest(): WebManifest {\n    // This is defined by @expo/webpack-config.\n    // If your site is bundled with a different config then you may not have access to the app.json automatically.\n    return process.env.APP_MANIFEST || {};\n  },\n  get experienceUrl(): string {\n    if (canUseDOM) {\n      return location.origin + location.pathname;\n    } else {\n      return '';\n    }\n  },\n  get debugMode(): boolean {\n    return __DEV__;\n  },\n  async getWebViewUserAgentAsync(): Promise<string | null> {\n    if (canUseDOM) {\n      return navigator.userAgent;\n    } else {\n      return null;\n    }\n  },\n} as NativeConstants;\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}