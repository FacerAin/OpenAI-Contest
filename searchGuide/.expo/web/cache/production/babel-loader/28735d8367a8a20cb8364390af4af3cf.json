{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=void 0;var _UIManager=_interopRequireDefault(require(\"../../exports/UIManager\"));var TextInputState={_currentlyFocusedNode:null,currentlyFocusedField:function currentlyFocusedField(){if(document.activeElement!==this._currentlyFocusedNode){this._currentlyFocusedNode=null;}return this._currentlyFocusedNode;},focusTextInput:function focusTextInput(textFieldNode){if(textFieldNode!==null){this._currentlyFocusedNode=textFieldNode;if(document.activeElement!==textFieldNode){_UIManager.default.focus(textFieldNode);}}},blurTextInput:function blurTextInput(textFieldNode){if(textFieldNode!==null){this._currentlyFocusedNode=null;if(document.activeElement===textFieldNode){_UIManager.default.blur(textFieldNode);}}}};var _default=TextInputState;exports.default=_default;","map":{"version":3,"sources":["C:/Users/bluej/Desktop/2_2/searchGuide/searchGuide/node_modules/react-native-web/dist/modules/TextInputState/index.js"],"names":["TextInputState","_currentlyFocusedNode","currentlyFocusedField","document","activeElement","focusTextInput","textFieldNode","UIManager","focus","blurTextInput","blur"],"mappings":"mKASA,0EAOA,GAAIA,CAAAA,cAAc,CAAG,CAInBC,qBAAqB,CAAE,IAJJ,CAUnBC,qBAAqB,CAAE,QAASA,CAAAA,qBAAT,EAAiC,CACtD,GAAIC,QAAQ,CAACC,aAAT,GAA2B,KAAKH,qBAApC,CAA2D,CACzD,KAAKA,qBAAL,CAA6B,IAA7B,CACD,CAED,MAAO,MAAKA,qBAAZ,CACD,CAhBkB,CAuBnBI,cAAc,CAAE,QAASA,CAAAA,cAAT,CAAwBC,aAAxB,CAAuC,CACrD,GAAIA,aAAa,GAAK,IAAtB,CAA4B,CAC1B,KAAKL,qBAAL,CAA6BK,aAA7B,CAEA,GAAIH,QAAQ,CAACC,aAAT,GAA2BE,aAA/B,CAA8C,CAC5CC,mBAAUC,KAAV,CAAgBF,aAAhB,EACD,CACF,CACF,CA/BkB,CAsCnBG,aAAa,CAAE,QAASA,CAAAA,aAAT,CAAuBH,aAAvB,CAAsC,CACnD,GAAIA,aAAa,GAAK,IAAtB,CAA4B,CAC1B,KAAKL,qBAAL,CAA6B,IAA7B,CAEA,GAAIE,QAAQ,CAACC,aAAT,GAA2BE,aAA/B,CAA8C,CAC5CC,mBAAUG,IAAV,CAAeJ,aAAf,EACD,CACF,CACF,CA9CkB,CAArB,C,aAgDeN,c","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport UIManager from '../../exports/UIManager';\n/**\n * This class is responsible for coordinating the \"focused\"\n * state for TextInputs. All calls relating to the keyboard\n * should be funneled through here\n */\n\nvar TextInputState = {\n  /**\n   * Internal state\n   */\n  _currentlyFocusedNode: null,\n\n  /**\n   * Returns the ID of the currently focused text field, if one exists\n   * If no text field is focused it returns null\n   */\n  currentlyFocusedField: function currentlyFocusedField() {\n    if (document.activeElement !== this._currentlyFocusedNode) {\n      this._currentlyFocusedNode = null;\n    }\n\n    return this._currentlyFocusedNode;\n  },\n\n  /**\n   * @param {Object} TextInputID id of the text field to focus\n   * Focuses the specified text field\n   * noop if the text field was already focused\n   */\n  focusTextInput: function focusTextInput(textFieldNode) {\n    if (textFieldNode !== null) {\n      this._currentlyFocusedNode = textFieldNode;\n\n      if (document.activeElement !== textFieldNode) {\n        UIManager.focus(textFieldNode);\n      }\n    }\n  },\n\n  /**\n   * @param {Object} textFieldNode id of the text field to focus\n   * Unfocuses the specified text field\n   * noop if it wasn't focused\n   */\n  blurTextInput: function blurTextInput(textFieldNode) {\n    if (textFieldNode !== null) {\n      this._currentlyFocusedNode = null;\n\n      if (document.activeElement === textFieldNode) {\n        UIManager.blur(textFieldNode);\n      }\n    }\n  }\n};\nexport default TextInputState;"]},"metadata":{},"sourceType":"script"}