{"ast":null,"code":"var _interopRequireWildcard=require(\"@babel/runtime/helpers/interopRequireWildcard\");var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=void 0;var _extends2=_interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));var _objectWithoutProperties2=_interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));var _classCallCheck2=_interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));var _createClass2=_interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));var _possibleConstructorReturn2=_interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));var _getPrototypeOf2=_interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));var _inherits2=_interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));var React=_interopRequireWildcard(require(\"react\"));var _color=_interopRequireDefault(require(\"color\"));var _StyleSheet=_interopRequireDefault(require(\"react-native-web/dist/exports/StyleSheet\"));var _View=_interopRequireDefault(require(\"react-native-web/dist/exports/View\"));var _theming=require(\"../core/theming\");var _colors=require(\"../styles/colors\");var _jsxFileName=\"/Users/satya/Workspace/Callstack/react-native-paper/src/components/Divider.tsx\";var Divider=function(_React$Component){(0,_inherits2.default)(Divider,_React$Component);function Divider(){(0,_classCallCheck2.default)(this,Divider);return(0,_possibleConstructorReturn2.default)(this,(0,_getPrototypeOf2.default)(Divider).apply(this,arguments));}(0,_createClass2.default)(Divider,[{key:\"render\",value:function render(){var _this$props=this.props,inset=_this$props.inset,style=_this$props.style,theme=_this$props.theme,rest=(0,_objectWithoutProperties2.default)(_this$props,[\"inset\",\"style\",\"theme\"]);var isDarkTheme=theme.dark;return React.createElement(_View.default,(0,_extends2.default)({},rest,{style:[isDarkTheme?styles.dark:styles.light,inset&&styles.inset,style],__source:{fileName:_jsxFileName,lineNumber:46}}));}}]);return Divider;}(React.Component);var styles=_StyleSheet.default.create({light:{backgroundColor:(0,_color.default)(_colors.black).alpha(0.12).rgb().string(),height:_StyleSheet.default.hairlineWidth},dark:{backgroundColor:(0,_color.default)(_colors.white).alpha(0.12).rgb().string(),height:_StyleSheet.default.hairlineWidth},inset:{marginLeft:72}});var _default=(0,_theming.withTheme)(Divider);exports.default=_default;","map":{"version":3,"sources":["Divider.tsx"],"names":["Divider","React","Component","inset","style","theme","rest","isDarkTheme","styles","StyleSheet","light","backgroundColor","color","height","dark","marginLeft","withTheme"],"mappings":"k5BAAA,oDACA,oD,4KAEA,wCACA,wC,kGAoCMA,GAAAA,CAAAA,O,oUACK,CAAA,GAAA,CAAA,WAAA,CACkC,KADlC,KAAA,CACCG,KADD,CAAA,WAAA,CAAA,KAAA,CACQC,KADR,CAAA,WAAA,CAAA,KAAA,CACeC,KADf,CAAA,WAAA,CAAA,KAAA,CACyBC,IADzB,CAAA,sCAAA,WAAA,CAAA,CAAA,OAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA,CAAA,GAEOC,CAAAA,WAFP,CAEuBF,KAFvB,CAAA,IAAA,CAGP,MACE,CAAA,KAAA,CAAA,aAAA,CAAA,aAAA,CAAA,sBAAA,EAAA,CAAA,IAAA,CAAA,CAEE,KAAK,CAAE,CACLE,WAAW,CAAGC,MAAM,CAAT,IAAA,CAAiBA,MAAM,CAD7B,KAAA,CAELL,KAAK,EAAIK,MAAM,CAFV,KAAA,CAFT,KAES,CAFT,CAAA,QAAA,CAAA,CAAA,QAAA,CAAA,YAAA,CAAA,UAAA,CADF,EACE,CAAA,CAAA,CAAA,CADF,C,sBAJkBP,KAAK,CAACC,S,CAAtBF,CAiBN,GAAMQ,CAAAA,MAAM,CAAGC,oBAAAA,MAAAA,CAAkB,CAC/BC,KAAK,CAAE,CACLC,eAAe,CAAEC,mBAAAA,aAAAA,EAAAA,KAAAA,CAAAA,IAAAA,EAAAA,GAAAA,GADZ,MACYA,EADZ,CAKLC,MAAM,CAAEJ,oBANqB,aACxB,CADwB,CAQ/BK,IAAI,CAAE,CACJH,eAAe,CAAEC,mBAAAA,aAAAA,EAAAA,KAAAA,CAAAA,IAAAA,EAAAA,GAAAA,GADb,MACaA,EADb,CAKJC,MAAM,CAAEJ,oBAbqB,aAQzB,CARyB,CAe/BN,KAAK,CAAE,CACLY,UAAU,CAhBd,EAeS,CAfwB,CAAlBN,CAAf,C,aAoBeO,uBAAf,OAAeA,C","sourcesContent":["import * as React from 'react';\nimport color from 'color';\nimport { StyleSheet, View, ViewStyle, StyleProp } from 'react-native';\nimport { withTheme } from '../core/theming';\nimport { black, white } from '../styles/colors';\nimport { Theme, $RemoveChildren } from '../types';\n\ntype Props = $RemoveChildren<typeof View> & {\n  /**\n   *  Whether divider has a left inset.\n   */\n  inset?: boolean;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\n/**\n * A divider is a thin, lightweight separator that groups content in lists and page layouts.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Divider, Text } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <View>\n *     <Text>Apple</Text>\n *     <Divider />\n *     <Text>Orange</Text>\n *     <Divider />\n *   </View>\n * );\n *\n * export default MyComponent;\n * ```\n */\nclass Divider extends React.Component<Props> {\n  render() {\n    const { inset, style, theme, ...rest } = this.props;\n    const { dark: isDarkTheme } = theme;\n    return (\n      <View\n        {...rest}\n        style={[\n          isDarkTheme ? styles.dark : styles.light,\n          inset && styles.inset,\n          style,\n        ]}\n      />\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  light: {\n    backgroundColor: color(black)\n      .alpha(0.12)\n      .rgb()\n      .string(),\n    height: StyleSheet.hairlineWidth,\n  },\n  dark: {\n    backgroundColor: color(white)\n      .alpha(0.12)\n      .rgb()\n      .string(),\n    height: StyleSheet.hairlineWidth,\n  },\n  inset: {\n    marginLeft: 72,\n  },\n});\n\nexport default withTheme(Divider);\n"]},"metadata":{},"sourceType":"script"}