{"ast":null,"code":"'use strict';var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=void 0;var _EmitterSubscription=_interopRequireDefault(require(\"./EmitterSubscription\"));var _EventSubscriptionVendor=_interopRequireDefault(require(\"./EventSubscriptionVendor\"));var _emptyFunction=_interopRequireDefault(require(\"fbjs/lib/emptyFunction\"));var _invariant=_interopRequireDefault(require(\"fbjs/lib/invariant\"));var EventEmitter=function(){function EventEmitter(subscriber){this._subscriber=subscriber||new _EventSubscriptionVendor.default();}var _proto=EventEmitter.prototype;_proto.addListener=function addListener(eventType,listener,context){return this._subscriber.addSubscription(eventType,new _EmitterSubscription.default(this,this._subscriber,listener,context));};_proto.once=function once(eventType,listener,context){var _this=this;return this.addListener(eventType,function(){_this.removeCurrentListener();for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}listener.apply(context,args);});};_proto.removeAllListeners=function removeAllListeners(eventType){this._subscriber.removeAllSubscriptions(eventType);};_proto.removeCurrentListener=function removeCurrentListener(){(0,_invariant.default)(!!this._currentSubscription,'Not in an emitting cycle; there is no current subscription');this.removeSubscription(this._currentSubscription);};_proto.removeSubscription=function removeSubscription(subscription){(0,_invariant.default)(subscription.emitter===this,'Subscription does not belong to this emitter.');this._subscriber.removeSubscription(subscription);};_proto.listeners=function listeners(eventType){var subscriptions=this._subscriber.getSubscriptionsForType(eventType);return subscriptions?subscriptions.filter(_emptyFunction.default.thatReturnsTrue).map(function(subscription){return subscription.listener;}):[];};_proto.emit=function emit(eventType){var subscriptions=this._subscriber.getSubscriptionsForType(eventType);if(subscriptions){for(var i=0,l=subscriptions.length;i<l;i++){var subscription=subscriptions[i];if(subscription){this._currentSubscription=subscription;subscription.listener.apply(subscription.context,Array.prototype.slice.call(arguments,1));}}this._currentSubscription=null;}};_proto.removeListener=function removeListener(eventType,listener){var subscriptions=this._subscriber.getSubscriptionsForType(eventType);if(subscriptions){for(var i=0,l=subscriptions.length;i<l;i++){var subscription=subscriptions[i];if(subscription&&subscription.listener===listener){subscription.remove();}}}};return EventEmitter;}();var _default=EventEmitter;exports.default=_default;","map":{"version":3,"sources":["C:/Users/bluej/Desktop/2_2/searchGuide/searchGuide/node_modules/react-native-web/dist/vendor/react-native/emitter/EventEmitter.js"],"names":["EventEmitter","subscriber","_subscriber","EventSubscriptionVendor","_proto","prototype","addListener","eventType","listener","context","addSubscription","EmitterSubscription","once","_this","removeCurrentListener","_len","arguments","length","args","Array","_key","apply","removeAllListeners","removeAllSubscriptions","_currentSubscription","removeSubscription","subscription","emitter","listeners","subscriptions","getSubscriptionsForType","filter","emptyFunction","thatReturnsTrue","map","emit","i","l","slice","call","removeListener","remove"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @providesModule EventEmitter\n * \n * @typecheck\n */\n'use strict';\n\nimport EmitterSubscription from './EmitterSubscription';\nimport EventSubscriptionVendor from './EventSubscriptionVendor';\nimport emptyFunction from 'fbjs/lib/emptyFunction';\nimport invariant from 'fbjs/lib/invariant';\n/**\n * @class EventEmitter\n * @description\n * An EventEmitter is responsible for managing a set of listeners and publishing\n * events to them when it is told that such events happened. In addition to the\n * data for the given event it also sends a event control object which allows\n * the listeners/handlers to prevent the default behavior of the given event.\n *\n * The emitter is designed to be generic enough to support all the different\n * contexts in which one might want to emit events. It is a simple multicast\n * mechanism on top of which extra functionality can be composed. For example, a\n * more advanced emitter may use an EventHolder and EventFactory.\n */\n\nvar EventEmitter =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @constructor\n   *\n   * @param {EventSubscriptionVendor} subscriber - Optional subscriber instance\n   *   to use. If omitted, a new subscriber will be created for the emitter.\n   */\n  function EventEmitter(subscriber) {\n    this._subscriber = subscriber || new EventSubscriptionVendor();\n  }\n  /**\n   * Adds a listener to be invoked when events of the specified type are\n   * emitted. An optional calling context may be provided. The data arguments\n   * emitted will be passed to the listener function.\n   *\n   * TODO: Annotate the listener arg's type. This is tricky because listeners\n   *       can be invoked with varargs.\n   *\n   * @param {string} eventType - Name of the event to listen to\n   * @param {function} listener - Function to invoke when the specified event is\n   *   emitted\n   * @param {*} context - Optional context object to use when invoking the\n   *   listener\n   */\n\n\n  var _proto = EventEmitter.prototype;\n\n  _proto.addListener = function addListener(eventType, listener, context) {\n    return this._subscriber.addSubscription(eventType, new EmitterSubscription(this, this._subscriber, listener, context));\n  }\n  /**\n   * Similar to addListener, except that the listener is removed after it is\n   * invoked once.\n   *\n   * @param {string} eventType - Name of the event to listen to\n   * @param {function} listener - Function to invoke only once when the\n   *   specified event is emitted\n   * @param {*} context - Optional context object to use when invoking the\n   *   listener\n   */\n  ;\n\n  _proto.once = function once(eventType, listener, context) {\n    var _this = this;\n\n    return this.addListener(eventType, function () {\n      _this.removeCurrentListener();\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      listener.apply(context, args);\n    });\n  }\n  /**\n   * Removes all of the registered listeners, including those registered as\n   * listener maps.\n   *\n   * @param {?string} eventType - Optional name of the event whose registered\n   *   listeners to remove\n   */\n  ;\n\n  _proto.removeAllListeners = function removeAllListeners(eventType) {\n    this._subscriber.removeAllSubscriptions(eventType);\n  }\n  /**\n   * Provides an API that can be called during an eventing cycle to remove the\n   * last listener that was invoked. This allows a developer to provide an event\n   * object that can remove the listener (or listener map) during the\n   * invocation.\n   *\n   * If it is called when not inside of an emitting cycle it will throw.\n   *\n   * @throws {Error} When called not during an eventing cycle\n   *\n   * @example\n   *   var subscription = emitter.addListenerMap({\n   *     someEvent: function(data, event) {\n   *       console.log(data);\n   *       emitter.removeCurrentListener();\n   *     }\n   *   });\n   *\n   *   emitter.emit('someEvent', 'abc'); // logs 'abc'\n   *   emitter.emit('someEvent', 'def'); // does not log anything\n   */\n  ;\n\n  _proto.removeCurrentListener = function removeCurrentListener() {\n    invariant(!!this._currentSubscription, 'Not in an emitting cycle; there is no current subscription');\n    this.removeSubscription(this._currentSubscription);\n  }\n  /**\n   * Removes a specific subscription. Called by the `remove()` method of the\n   * subscription itself to ensure any necessary cleanup is performed.\n   */\n  ;\n\n  _proto.removeSubscription = function removeSubscription(subscription) {\n    invariant(subscription.emitter === this, 'Subscription does not belong to this emitter.');\n\n    this._subscriber.removeSubscription(subscription);\n  }\n  /**\n   * Returns an array of listeners that are currently registered for the given\n   * event.\n   *\n   * @param {string} eventType - Name of the event to query\n   * @returns {array}\n   */\n  ;\n\n  _proto.listeners = function listeners(eventType) {\n    var subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n\n    return subscriptions ? subscriptions.filter(emptyFunction.thatReturnsTrue).map(function (subscription) {\n      return subscription.listener;\n    }) : [];\n  }\n  /**\n   * Emits an event of the given type with the given data. All handlers of that\n   * particular type will be notified.\n   *\n   * @param {string} eventType - Name of the event to emit\n   * @param {...*} Arbitrary arguments to be passed to each registered listener\n   *\n   * @example\n   *   emitter.addListener('someEvent', function(message) {\n   *     console.log(message);\n   *   });\n   *\n   *   emitter.emit('someEvent', 'abc'); // logs 'abc'\n   */\n  ;\n\n  _proto.emit = function emit(eventType) {\n    var subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n\n    if (subscriptions) {\n      for (var i = 0, l = subscriptions.length; i < l; i++) {\n        var subscription = subscriptions[i]; // The subscription may have been removed during this event loop.\n\n        if (subscription) {\n          this._currentSubscription = subscription;\n          subscription.listener.apply(subscription.context, Array.prototype.slice.call(arguments, 1));\n        }\n      }\n\n      this._currentSubscription = null;\n    }\n  }\n  /**\n   * Removes the given listener for event of specific type.\n   *\n   * @param {string} eventType - Name of the event to emit\n   * @param {function} listener - Function to invoke when the specified event is\n   *   emitted\n   *\n   * @example\n   *   emitter.removeListener('someEvent', function(message) {\n   *     console.log(message);\n   *   }); // removes the listener if already registered\n   *\n   */\n  ;\n\n  _proto.removeListener = function removeListener(eventType, listener) {\n    var subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n\n    if (subscriptions) {\n      for (var i = 0, l = subscriptions.length; i < l; i++) {\n        var subscription = subscriptions[i]; // The subscription may have been removed during this event loop.\n        // its listener matches the listener in method parameters\n\n        if (subscription && subscription.listener === listener) {\n          subscription.remove();\n        }\n      }\n    }\n  };\n\n  return EventEmitter;\n}();\n\nexport default EventEmitter;"]},"metadata":{},"sourceType":"script"}