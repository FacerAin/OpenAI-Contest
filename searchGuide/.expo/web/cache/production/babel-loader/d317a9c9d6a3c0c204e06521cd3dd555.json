{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=void 0;var _regenerator=_interopRequireDefault(require(\"@babel/runtime/regenerator\"));var _slicedToArray2=_interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));var _defineProperty2=_interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));var _core=require(\"@unimodules/core\");var _ExecutionEnvironment=require(\"fbjs/lib/ExecutionEnvironment\");var _ScreenOrientation=require(\"./ScreenOrientation.types\");var _ScreenOrientation2=require(\"./ScreenOrientation\");var _OrientationWebToAPI;var OrientationLockAPIToWeb={DEFAULT:_ScreenOrientation.WebOrientationLock.NATURAL,ALL:_ScreenOrientation.WebOrientationLock.ANY,PORTRAIT:_ScreenOrientation.WebOrientationLock.PORTRAIT,PORTRAIT_UP:_ScreenOrientation.WebOrientationLock.PORTRAIT_PRIMARY,PORTRAIT_DOWN:_ScreenOrientation.WebOrientationLock.PORTRAIT_SECONDARY,LANDSCAPE:_ScreenOrientation.WebOrientationLock.LANDSCAPE,LANDSCAPE_LEFT:_ScreenOrientation.WebOrientationLock.LANDSCAPE_PRIMARY,LANDSCAPE_RIGHT:_ScreenOrientation.WebOrientationLock.LANDSCAPE_SECONDARY};var OrientationWebToAPI=(_OrientationWebToAPI={},(0,_defineProperty2.default)(_OrientationWebToAPI,_ScreenOrientation.WebOrientation.PORTRAIT_PRIMARY,_ScreenOrientation.Orientation.PORTRAIT_UP),(0,_defineProperty2.default)(_OrientationWebToAPI,_ScreenOrientation.WebOrientation.PORTRAIT_SECONDARY,_ScreenOrientation.Orientation.PORTRAIT_DOWN),(0,_defineProperty2.default)(_OrientationWebToAPI,_ScreenOrientation.WebOrientation.LANDSCAPE_PRIMARY,_ScreenOrientation.Orientation.LANDSCAPE_LEFT),(0,_defineProperty2.default)(_OrientationWebToAPI,_ScreenOrientation.WebOrientation.LANDSCAPE_SECONDARY,_ScreenOrientation.Orientation.LANDSCAPE_RIGHT),_OrientationWebToAPI);var _ref=_ExecutionEnvironment.canUseViewport&&window,screen=_ref.screen;var orientation=_ExecutionEnvironment.canUseViewport&&(screen.orientation||screen.msOrientation||null);function emitOrientationEvent(){var _ref2,_ref3,orientationLock,orientationInfo;return _regenerator.default.async(function emitOrientationEvent$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return _regenerator.default.awrap(Promise.all([(0,_ScreenOrientation2.getOrientationLockAsync)(),(0,_ScreenOrientation2.getOrientationAsync)()]));case 2:_ref2=_context.sent;_ref3=(0,_slicedToArray2.default)(_ref2,2);orientationLock=_ref3[0];orientationInfo=_ref3[1];_core.SyntheticPlatformEmitter.emit('expoDidUpdateDimensions',{orientationLock:orientationLock,orientationInfo:orientationInfo});case 7:case\"end\":return _context.stop();}}});}if(_ExecutionEnvironment.canUseEventListeners){if(orientation){orientation.addEventListener('change',emitOrientationEvent);}else{window.addEventListener('orientationchange',emitOrientationEvent);}}function _convertToLegacyOrientationLock(orientationLock){switch(orientationLock){case _ScreenOrientation.WebOrientationLock.UNKNOWN:throw new Error(\"expo-screen-orientation: WebOrientationLock.UNKNOWN is not a valid lock to be converted.\");case _ScreenOrientation.WebOrientationLock.ANY:return['portrait','landscape'];case _ScreenOrientation.WebOrientationLock.NATURAL:return'default';default:return orientationLock;}}function _lockAsync(webOrientationLock){var legacyLock,lockOrientation,isSuccess;return _regenerator.default.async(function _lockAsync$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:if(!(webOrientationLock===_ScreenOrientation.WebOrientationLock.UNKNOWN)){_context2.next=2;break;}throw new Error(\"expo-screen-orientation: WebOrientationLock.UNKNOWN is not a valid lock that can be applied to the device.\");case 2:if(!(screen.orientation&&screen.orientation.lock)){_context2.next=7;break;}_context2.next=5;return _regenerator.default.awrap(screen.orientation.lock(webOrientationLock));case 5:_context2.next=16;break;case 7:if(!(screen['lockOrientation']||screen['mozLockOrientation']||screen['msLockOrientation'])){_context2.next=15;break;}legacyLock=_convertToLegacyOrientationLock(webOrientationLock);lockOrientation=screen['lockOrientation']||screen['mozLockOrientation']||screen['msLockOrientation'];isSuccess=lockOrientation.call(screen,legacyLock);if(isSuccess){_context2.next=13;break;}throw new Error(\"Applying orientation lock: \"+JSON.stringify(webOrientationLock)+\" to device was denied\");case 13:_context2.next=16;break;case 15:throw new Error(\"expo-screen-orientation: The browser doesn't support locking screen orientation.\");case 16:case\"end\":return _context2.stop();}}});}var _lastWebOrientationLock=_ScreenOrientation.WebOrientationLock.UNKNOWN;var _default={get name(){return'ExpoScreenOrientation';},supportsOrientationLockAsync:function supportsOrientationLockAsync(orientationLock){return _regenerator.default.async(function supportsOrientationLockAsync$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:return _context3.abrupt(\"return\",orientationLock in OrientationLockAPIToWeb);case 1:case\"end\":return _context3.stop();}}});},getPlatformOrientationLockAsync:function getPlatformOrientationLockAsync(){return _regenerator.default.async(function getPlatformOrientationLockAsync$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:return _context4.abrupt(\"return\",_lastWebOrientationLock);case 1:case\"end\":return _context4.stop();}}});},getOrientationAsync:function getOrientationAsync(){var webOrientation;return _regenerator.default.async(function getOrientationAsync$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:webOrientation=screen['msOrientation']||(screen.orientation||screen['mozOrientation']||{}).type;if(webOrientation){_context5.next=3;break;}return _context5.abrupt(\"return\",{orientation:_ScreenOrientation.Orientation.UNKNOWN});case 3:return _context5.abrupt(\"return\",{orientation:OrientationWebToAPI[webOrientation]});case 4:case\"end\":return _context5.stop();}}});},lockAsync:function lockAsync(orientationLock){var webOrientationLock;return _regenerator.default.async(function lockAsync$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:webOrientationLock=OrientationLockAPIToWeb[orientationLock];if(webOrientationLock){_context6.next=3;break;}throw new TypeError(\"Invalid Orientation Lock: \"+orientationLock);case 3:_context6.next=5;return _regenerator.default.awrap(_lockAsync(webOrientationLock));case 5:case\"end\":return _context6.stop();}}});},lockPlatformAsync:function lockPlatformAsync(webOrientationLock){return _regenerator.default.async(function lockPlatformAsync$(_context7){while(1){switch(_context7.prev=_context7.next){case 0:_context7.next=2;return _regenerator.default.awrap(_lockAsync(webOrientationLock));case 2:_lastWebOrientationLock=webOrientationLock;case 3:case\"end\":return _context7.stop();}}});},unlockAsync:function unlockAsync(){var unlockOrientation,isSuccess;return _regenerator.default.async(function unlockAsync$(_context8){while(1){switch(_context8.prev=_context8.next){case 0:if(!(screen.orientation&&screen.orientation.unlock)){_context8.next=4;break;}screen.orientation.unlock();_context8.next=12;break;case 4:if(!(screen['unlockOrientation']||screen['mozUnlockOrientation']||screen['msUnlockOrientation'])){_context8.next=11;break;}unlockOrientation=screen['unlockOrientation']||screen['mozUnlockOrientation']||screen['msUnlockOrientation'];isSuccess=unlockOrientation.call(screen);if(isSuccess){_context8.next=9;break;}throw new Error(\"Unlocking screen orientation on device was denied\");case 9:_context8.next=12;break;case 11:throw new Error(\"expo-screen-orientation: The browser doesn't support unlocking screen orientation.\");case 12:case\"end\":return _context8.stop();}}});}};exports.default=_default;","map":{"version":3,"sources":["../../src/ScreenOrientation/ExpoScreenOrientation.web.ts"],"names":[],"mappings":"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","sourcesContent":["import { SyntheticPlatformEmitter } from '@unimodules/core';\nimport { canUseViewport, canUseEventListeners } from 'fbjs/lib/ExecutionEnvironment';\n\nimport {\n  OrientationInfo,\n  Orientation,\n  OrientationLock,\n  WebOrientationLock,\n  WebOrientation,\n} from './ScreenOrientation.types';\n\nimport { getOrientationLockAsync, getOrientationAsync } from './ScreenOrientation';\n\nconst OrientationLockAPIToWeb: {\n  [lock: string]: WebOrientationLock;\n} = {\n  DEFAULT: WebOrientationLock.NATURAL,\n  ALL: WebOrientationLock.ANY,\n  PORTRAIT: WebOrientationLock.PORTRAIT,\n  PORTRAIT_UP: WebOrientationLock.PORTRAIT_PRIMARY,\n  PORTRAIT_DOWN: WebOrientationLock.PORTRAIT_SECONDARY,\n  LANDSCAPE: WebOrientationLock.LANDSCAPE,\n  LANDSCAPE_LEFT: WebOrientationLock.LANDSCAPE_PRIMARY,\n  LANDSCAPE_RIGHT: WebOrientationLock.LANDSCAPE_SECONDARY,\n};\n\nconst OrientationWebToAPI: {\n  [orientationWeb: string]: Orientation;\n} = {\n  [WebOrientation.PORTRAIT_PRIMARY]: Orientation.PORTRAIT_UP,\n  [WebOrientation.PORTRAIT_SECONDARY]: Orientation.PORTRAIT_DOWN,\n  [WebOrientation.LANDSCAPE_PRIMARY]: Orientation.LANDSCAPE_LEFT,\n  [WebOrientation.LANDSCAPE_SECONDARY]: Orientation.LANDSCAPE_RIGHT,\n};\n\ndeclare const window: Window;\n\nconst { screen } = canUseViewport && window;\nconst orientation: ScreenOrientation | null =\n  canUseViewport && (screen.orientation || (screen as any).msOrientation || null);\n\nasync function emitOrientationEvent() {\n  const [orientationLock, orientationInfo] = await Promise.all([\n    getOrientationLockAsync(),\n    getOrientationAsync(),\n  ]);\n  SyntheticPlatformEmitter.emit('expoDidUpdateDimensions', {\n    orientationLock,\n    orientationInfo,\n  });\n}\n\nif (canUseEventListeners) {\n  if (orientation) {\n    orientation.addEventListener('change', emitOrientationEvent);\n  } else {\n    window.addEventListener('orientationchange', emitOrientationEvent);\n  }\n}\n\nfunction _convertToLegacyOrientationLock(orientationLock: WebOrientationLock): string | string[] {\n  switch (orientationLock) {\n    case WebOrientationLock.UNKNOWN:\n      throw new Error(\n        `expo-screen-orientation: WebOrientationLock.UNKNOWN is not a valid lock to be converted.`\n      );\n    case WebOrientationLock.ANY:\n      return ['portrait', 'landscape'];\n    case WebOrientationLock.NATURAL:\n      return 'default';\n    default:\n      return orientationLock;\n  }\n}\n\nasync function _lockAsync(webOrientationLock: WebOrientationLock): Promise<void> {\n  if (webOrientationLock === WebOrientationLock.UNKNOWN) {\n    throw new Error(\n      `expo-screen-orientation: WebOrientationLock.UNKNOWN is not a valid lock that can be applied to the device.`\n    );\n  }\n  if (screen.orientation && screen.orientation.lock) {\n    await screen.orientation.lock(webOrientationLock);\n  } else if (\n    screen['lockOrientation'] ||\n    screen['mozLockOrientation'] ||\n    screen['msLockOrientation']\n  ) {\n    const legacyLock = _convertToLegacyOrientationLock(webOrientationLock);\n    const lockOrientation =\n      screen['lockOrientation'] || screen['mozLockOrientation'] || screen['msLockOrientation'];\n    // correct `this` context must be passed in otherwise method call is disallowed by browser\n    const isSuccess = lockOrientation.call(screen, legacyLock);\n    if (!isSuccess) {\n      throw new Error(\n        `Applying orientation lock: ${JSON.stringify(webOrientationLock)} to device was denied`\n      );\n    }\n  } else {\n    throw new Error(\n      `expo-screen-orientation: The browser doesn't support locking screen orientation.`\n    );\n  }\n}\n\nlet _lastWebOrientationLock: WebOrientationLock = WebOrientationLock.UNKNOWN;\n\nexport default {\n  get name(): string {\n    return 'ExpoScreenOrientation';\n  },\n  async supportsOrientationLockAsync(orientationLock: OrientationLock): Promise<boolean> {\n    return orientationLock in OrientationLockAPIToWeb;\n  },\n  async getPlatformOrientationLockAsync(): Promise<WebOrientationLock> {\n    return _lastWebOrientationLock;\n  },\n  async getOrientationAsync(): Promise<OrientationInfo> {\n    const webOrientation =\n      screen['msOrientation'] || (screen.orientation || screen['mozOrientation'] || {}).type;\n    if (!webOrientation) {\n      return {\n        orientation: Orientation.UNKNOWN,\n      };\n    }\n    return {\n      orientation: OrientationWebToAPI[webOrientation],\n    };\n  },\n  async lockAsync(orientationLock: OrientationLock): Promise<void> {\n    const webOrientationLock = OrientationLockAPIToWeb[orientationLock];\n    if (!webOrientationLock) {\n      throw new TypeError(`Invalid Orientation Lock: ${orientationLock}`);\n    }\n    await _lockAsync(webOrientationLock);\n  },\n  async lockPlatformAsync(webOrientationLock: WebOrientationLock): Promise<void> {\n    await _lockAsync(webOrientationLock);\n    _lastWebOrientationLock = webOrientationLock;\n  },\n  async unlockAsync(): Promise<void> {\n    if (screen.orientation && screen.orientation.unlock) {\n      screen.orientation.unlock();\n    } else if (\n      screen['unlockOrientation'] ||\n      screen['mozUnlockOrientation'] ||\n      screen['msUnlockOrientation']\n    ) {\n      const unlockOrientation =\n        screen['unlockOrientation'] ||\n        screen['mozUnlockOrientation'] ||\n        screen['msUnlockOrientation'];\n      // correct `this` context must be passed in otherwise method call is disallowed by browser\n      const isSuccess = unlockOrientation.call(screen);\n      if (!isSuccess) {\n        throw new Error(`Unlocking screen orientation on device was denied`);\n      }\n    } else {\n      throw new Error(\n        `expo-screen-orientation: The browser doesn't support unlocking screen orientation.`\n      );\n    }\n  },\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}