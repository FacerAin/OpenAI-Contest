{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.createOrReuseStyleNode=createOrReuseStyleNode;exports.default=void 0;var _classCallCheck2=_interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));var _createClass2=_interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));var _possibleConstructorReturn2=_interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));var _getPrototypeOf2=_interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));var _inherits2=_interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));var _defineProperty2=_interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));var _StyleSheet=_interopRequireDefault(require(\"react-native-web/dist/exports/StyleSheet\"));var _AnimatedNode2=_interopRequireDefault(require(\"./AnimatedNode\"));var _AnimatedTransform=require(\"./AnimatedTransform\");var _areEqual=_interopRequireDefault(require(\"fbjs/lib/areEqual\"));function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(source,true).forEach(function(key){(0,_defineProperty2.default)(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(source).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}function sanitizeStyle(inputStyle){var style={};for(var key in inputStyle){var value=inputStyle[key];if(value instanceof _AnimatedNode2.default){style[key]=value.__nodeID;}}return style;}function createOrReuseStyleNode(style,oldNode){style=_StyleSheet.default.flatten(style)||{};if(style.transform){style=_objectSpread({},style,{transform:(0,_AnimatedTransform.createOrReuseTransformNode)(style.transform,oldNode&&oldNode._style.transform)});}var config=sanitizeStyle(style);if(oldNode&&(0,_areEqual.default)(config,oldNode._config)){return oldNode;}return new AnimatedStyle(style,config);}var AnimatedStyle=function(_AnimatedNode){(0,_inherits2.default)(AnimatedStyle,_AnimatedNode);function AnimatedStyle(style,config){var _this;(0,_classCallCheck2.default)(this,AnimatedStyle);_this=(0,_possibleConstructorReturn2.default)(this,(0,_getPrototypeOf2.default)(AnimatedStyle).call(this,{type:'style',style:config},Object.values(style)));_this._config=config;_this._style=style;return _this;}(0,_createClass2.default)(AnimatedStyle,[{key:\"_walkStyleAndGetAnimatedValues\",value:function _walkStyleAndGetAnimatedValues(style){var updatedStyle={};for(var key in style){var value=style[key];if(value instanceof _AnimatedNode2.default){updatedStyle[key]=value.__getValue();}else if(value&&!Array.isArray(value)&&typeof value==='object'){updatedStyle[key]=this._walkStyleAndGetAnimatedValues(value);}}return updatedStyle;}},{key:\"__onEvaluate\",value:function __onEvaluate(){return this._walkStyleAndGetAnimatedValues(this._style);}}]);return AnimatedStyle;}(_AnimatedNode2.default);exports.default=AnimatedStyle;","map":{"version":3,"sources":["C:/Users/bluej/Desktop/2_2/searchGuide/searchGuide/node_modules/react-native-reanimated/src/core/AnimatedStyle.js"],"names":["sanitizeStyle","inputStyle","style","key","value","AnimatedNode","__nodeID","createOrReuseStyleNode","oldNode","StyleSheet","flatten","transform","_style","config","_config","AnimatedStyle","type","Object","values","updatedStyle","__getValue","Array","isArray","_walkStyleAndGetAnimatedValues"],"mappings":"62BAEA,qEACA,sDAEA,mE,yxBAEA,QAASA,CAAAA,aAAT,CAAuBC,UAAvB,CAAmC,CACjC,GAAMC,CAAAA,KAAK,CAAG,EAAd,CACA,IAAK,GAAMC,CAAAA,GAAX,GAAkBF,CAAAA,UAAlB,CAA8B,CAC5B,GAAMG,CAAAA,KAAK,CAAGH,UAAU,CAACE,GAAD,CAAxB,CACA,GAAIC,KAAK,WAAYC,uBAArB,CAAmC,CACjCH,KAAK,CAACC,GAAD,CAAL,CAAaC,KAAK,CAACE,QAAnB,CACD,CACF,CACD,MAAOJ,CAAAA,KAAP,CACD,CAEM,QAASK,CAAAA,sBAAT,CAAgCL,KAAhC,CAAuCM,OAAvC,CAAgD,CACrDN,KAAK,CAAGO,oBAAWC,OAAX,CAAmBR,KAAnB,GAA6B,EAArC,CACA,GAAIA,KAAK,CAACS,SAAV,CAAqB,CACnBT,KAAK,kBACAA,KADA,EAEHS,SAAS,CAAE,kDACTT,KAAK,CAACS,SADG,CAETH,OAAO,EAAIA,OAAO,CAACI,MAAR,CAAeD,SAFjB,CAFR,EAAL,CAOD,CACD,GAAME,CAAAA,MAAM,CAAGb,aAAa,CAACE,KAAD,CAA5B,CACA,GAAIM,OAAO,EAAI,sBAAUK,MAAV,CAAkBL,OAAO,CAACM,OAA1B,CAAf,CAAmD,CACjD,MAAON,CAAAA,OAAP,CACD,CACD,MAAO,IAAIO,CAAAA,aAAJ,CAAkBb,KAAlB,CAAyBW,MAAzB,CAAP,CACD,C,GAMoBE,CAAAA,a,6EACnB,uBAAYb,KAAZ,CAAmBW,MAAnB,CAA2B,4DACzB,yGAAM,CAAEG,IAAI,CAAE,OAAR,CAAiBd,KAAK,CAAEW,MAAxB,CAAN,CAAwCI,MAAM,CAACC,MAAP,CAAchB,KAAd,CAAxC,GACA,MAAKY,OAAL,CAAeD,MAAf,CACA,MAAKD,MAAL,CAAcV,KAAd,CAHyB,aAI1B,C,6HAE8BA,K,CAAO,CACpC,GAAMiB,CAAAA,YAAY,CAAG,EAArB,CACA,IAAK,GAAMhB,CAAAA,GAAX,GAAkBD,CAAAA,KAAlB,CAAyB,CACvB,GAAME,CAAAA,KAAK,CAAGF,KAAK,CAACC,GAAD,CAAnB,CACA,GAAIC,KAAK,WAAYC,uBAArB,CAAmC,CACjCc,YAAY,CAAChB,GAAD,CAAZ,CAAoBC,KAAK,CAACgB,UAAN,EAApB,CACD,CAFD,IAEO,IAAIhB,KAAK,EAAI,CAACiB,KAAK,CAACC,OAAN,CAAclB,KAAd,CAAV,EAAkC,MAAOA,CAAAA,KAAP,GAAiB,QAAvD,CAAiE,CAEtEe,YAAY,CAAChB,GAAD,CAAZ,CAAoB,KAAKoB,8BAAL,CAAoCnB,KAApC,CAApB,CACD,CACF,CACD,MAAOe,CAAAA,YAAP,CACD,C,mDAEc,CACb,MAAO,MAAKI,8BAAL,CAAoC,KAAKX,MAAzC,CAAP,CACD,C,2BAvBwCP,sB","sourcesContent":["import { StyleSheet } from 'react-native';\n\nimport AnimatedNode from './AnimatedNode';\nimport { createOrReuseTransformNode } from './AnimatedTransform';\n\nimport deepEqual from 'fbjs/lib/areEqual';\n\nfunction sanitizeStyle(inputStyle) {\n  const style = {};\n  for (const key in inputStyle) {\n    const value = inputStyle[key];\n    if (value instanceof AnimatedNode) {\n      style[key] = value.__nodeID;\n    }\n  }\n  return style;\n}\n\nexport function createOrReuseStyleNode(style, oldNode) {\n  style = StyleSheet.flatten(style) || {};\n  if (style.transform) {\n    style = {\n      ...style,\n      transform: createOrReuseTransformNode(\n        style.transform,\n        oldNode && oldNode._style.transform\n      ),\n    };\n  }\n  const config = sanitizeStyle(style);\n  if (oldNode && deepEqual(config, oldNode._config)) {\n    return oldNode;\n  }\n  return new AnimatedStyle(style, config);\n}\n\n/**\n * AnimatedStyle should never be directly instantiated, use createOrReuseStyleNode\n * in order to make a new instance of this node.\n */\nexport default class AnimatedStyle extends AnimatedNode {\n  constructor(style, config) {\n    super({ type: 'style', style: config }, Object.values(style));\n    this._config = config;\n    this._style = style;\n  }\n\n  _walkStyleAndGetAnimatedValues(style) {\n    const updatedStyle = {};\n    for (const key in style) {\n      const value = style[key];\n      if (value instanceof AnimatedNode) {\n        updatedStyle[key] = value.__getValue();\n      } else if (value && !Array.isArray(value) && typeof value === 'object') {\n        // Support animating nested values (for example: shadowOffset.height)\n        updatedStyle[key] = this._walkStyleAndGetAnimatedValues(value);\n      }\n    }\n    return updatedStyle;\n  }\n\n  __onEvaluate() {\n    return this._walkStyleAndGetAnimatedValues(this._style);\n  }\n}\n"]},"metadata":{},"sourceType":"script"}