{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=void 0;var _defineProperty2=_interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));var _regenerator=_interopRequireDefault(require(\"@babel/runtime/regenerator\"));var _expoConstants=_interopRequireDefault(require(\"expo-constants\"));var _qs=_interopRequireDefault(require(\"qs\"));var _expoWebBrowser=require(\"expo-web-browser\");var _Linking=_interopRequireDefault(require(\"./Linking/Linking\"));function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(source,true).forEach(function(key){(0,_defineProperty2.default)(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(source).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}var BASE_URL=\"https://auth.expo.io\";var _authLock=false;function startAsync(options){var returnUrl,authUrl,startUrl,result,_parseUrl,params,errorCode;return _regenerator.default.async(function startAsync$(_context){while(1){switch(_context.prev=_context.next){case 0:returnUrl=options.returnUrl||getDefaultReturnUrl();authUrl=options.authUrl;startUrl=getStartUrl(authUrl,returnUrl);if(authUrl){_context.next=5;break;}throw new Error('No authUrl provided to AuthSession.startAsync. An authUrl is required -- it points to the page where the user will be able to sign in.');case 5:if(!_authLock){_context.next=8;break;}if(__DEV__){console.warn('Attempted to call AuthSession.startAsync multiple times while already active. Only one AuthSession can be active at any given time.');}return _context.abrupt(\"return\",{type:'locked'});case 8:_authLock=true;_context.prev=9;_context.next=12;return _regenerator.default.awrap(_openWebBrowserAsync(startUrl,returnUrl));case 12:result=_context.sent;case 13:_context.prev=13;_authLock=false;return _context.finish(13);case 16:if(result){_context.next=18;break;}throw new Error('Unexpected missing AuthSession result');case 18:if(result.url){_context.next=24;break;}if(!result.type){_context.next=23;break;}return _context.abrupt(\"return\",result);case 23:throw new Error('Unexpected AuthSession result with missing type');case 24:_parseUrl=parseUrl(result.url),params=_parseUrl.params,errorCode=_parseUrl.errorCode;return _context.abrupt(\"return\",{type:errorCode?'error':'success',params:params,errorCode:errorCode,url:result.url});case 26:case\"end\":return _context.stop();}}},null,null,[[9,,13,16]]);}function dismiss(){(0,_expoWebBrowser.dismissAuthSession)();}function _openWebBrowserAsync(startUrl,returnUrl){var result;return _regenerator.default.async(function _openWebBrowserAsync$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return _regenerator.default.awrap((0,_expoWebBrowser.openAuthSessionAsync)(startUrl,returnUrl));case 2:result=_context2.sent;if(!(result.type==='cancel'||result.type==='dismiss')){_context2.next=5;break;}return _context2.abrupt(\"return\",{type:result.type});case 5:return _context2.abrupt(\"return\",result);case 6:case\"end\":return _context2.stop();}}});}function getStartUrl(authUrl,returnUrl){var queryString=_qs.default.stringify({authUrl:authUrl,returnUrl:returnUrl});return getRedirectUrl()+\"/start?\"+queryString;}function getRedirectUrl(){var redirectUrl=BASE_URL+\"/\"+_expoConstants.default.manifest.id;if(__DEV__){_warnIfAnonymous(_expoConstants.default.manifest.id,redirectUrl);}return redirectUrl;}function getDefaultReturnUrl(){return _Linking.default.makeUrl('expo-auth-session');}function parseUrl(url){var parts=url.split('#');var hash=parts[1];var partsWithoutHash=parts[0].split('?');var queryString=partsWithoutHash[partsWithoutHash.length-1];var parsedSearch=_qs.default.parse(queryString);var errorCode=parsedSearch.errorCode;delete parsedSearch.errorCode;var parsedHash={};if(parts[1]){parsedHash=_qs.default.parse(hash);}var params=_objectSpread({},parsedSearch,{},parsedHash);return{errorCode:errorCode,params:params};}function _warnIfAnonymous(id,url){if(id.startsWith('@anonymous/')){console.warn(\"You are not currently signed in to Expo on your development machine. As a result, the redirect URL for AuthSession will be \\\"\"+url+\"\\\". If you are using an OAuth provider that requires whitelisting redirect URLs, we recommend that you do not whitelist this URL -- instead, you should sign in to Expo to acquired a unique redirect URL. Additionally, if you do decide to publish this app using Expo, you will need to register an account to do it.\");}}var _default={dismiss:dismiss,getRedirectUrl:getRedirectUrl,getStartUrl:getStartUrl,getDefaultReturnUrl:getDefaultReturnUrl,get getRedirectUri(){console.warn('Use AuthSession.getRedirectUrl rather than AuthSession.getRedirectUri (Url instead of Uri)');return getRedirectUrl;},startAsync:startAsync};exports.default=_default;","map":{"version":3,"sources":["../src/AuthSession.ts"],"names":[],"mappings":"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","sourcesContent":["import Constants from 'expo-constants';\nimport qs from 'qs';\n\nimport { openAuthSessionAsync, dismissAuthSession } from 'expo-web-browser';\nimport Linking from './Linking/Linking';\n\ntype AuthSessionOptions = {\n  authUrl: string;\n  returnUrl?: string;\n};\n\ntype AuthSessionResult =\n  | { type: 'cancel' | 'dismiss' | 'locked' }\n  | {\n      type: 'error' | 'success';\n      errorCode: string | null;\n      params: { [key: string]: string };\n      url: string;\n    };\n\nconst BASE_URL = `https://auth.expo.io`;\nlet _authLock = false;\n\nasync function startAsync(options: AuthSessionOptions): Promise<AuthSessionResult> {\n  const returnUrl = options.returnUrl || getDefaultReturnUrl();\n  const authUrl = options.authUrl;\n  const startUrl = getStartUrl(authUrl, returnUrl);\n\n  // Prevent accidentally starting to an empty url\n  if (!authUrl) {\n    throw new Error(\n      'No authUrl provided to AuthSession.startAsync. An authUrl is required -- it points to the page where the user will be able to sign in.'\n    );\n  }\n\n  // Prevent multiple sessions from running at the same time, WebBrowser doesn't\n  // support it this makes the behavior predictable.\n  if (_authLock) {\n    if (__DEV__) {\n      console.warn(\n        'Attempted to call AuthSession.startAsync multiple times while already active. Only one AuthSession can be active at any given time.'\n      );\n    }\n\n    return { type: 'locked' };\n  }\n\n  // About to start session, set lock\n  _authLock = true;\n\n  let result;\n  try {\n    result = await _openWebBrowserAsync(startUrl, returnUrl);\n  } finally {\n    // WebBrowser session complete, unset lock\n    _authLock = false;\n  }\n\n  // Handle failures\n  if (!result) {\n    throw new Error('Unexpected missing AuthSession result');\n  }\n  if (!result.url) {\n    if (result.type) {\n      return result;\n    } else {\n      throw new Error('Unexpected AuthSession result with missing type');\n    }\n  }\n\n  let { params, errorCode } = parseUrl(result.url);\n\n  return {\n    type: errorCode ? 'error' : 'success',\n    params,\n    errorCode,\n    url: result.url,\n  };\n}\n\nfunction dismiss() {\n  dismissAuthSession();\n}\n\nasync function _openWebBrowserAsync(startUrl, returnUrl) {\n  // $FlowIssue: Flow thinks the awaited result can be a promise\n  let result = await openAuthSessionAsync(startUrl, returnUrl);\n  if (result.type === 'cancel' || result.type === 'dismiss') {\n    return { type: result.type };\n  }\n\n  return result;\n}\n\nfunction getStartUrl(authUrl: string, returnUrl: string): string {\n  let queryString = qs.stringify({\n    authUrl,\n    returnUrl,\n  });\n\n  return `${getRedirectUrl()}/start?${queryString}`;\n}\n\nfunction getRedirectUrl(): string {\n  const redirectUrl = `${BASE_URL}/${Constants.manifest.id}`;\n  if (__DEV__) {\n    _warnIfAnonymous(Constants.manifest.id, redirectUrl);\n  }\n  return redirectUrl;\n}\n\nfunction getDefaultReturnUrl(): string {\n  return Linking.makeUrl('expo-auth-session');\n}\n\nfunction parseUrl(url: string): { errorCode: string | null; params: { [key: string]: string } } {\n  let parts = url.split('#');\n  let hash = parts[1];\n  let partsWithoutHash = parts[0].split('?');\n  let queryString = partsWithoutHash[partsWithoutHash.length - 1];\n\n  // Get query string (?hello=world)\n  let parsedSearch = qs.parse(queryString);\n\n  // Pull errorCode off of params\n  let { errorCode } = parsedSearch;\n  delete parsedSearch.errorCode;\n\n  // Get hash (#abc=example)\n  let parsedHash = {};\n  if (parts[1]) {\n    parsedHash = qs.parse(hash);\n  }\n\n  // Merge search and hash\n  let params = {\n    ...parsedSearch,\n    ...parsedHash,\n  };\n\n  return {\n    errorCode,\n    params,\n  };\n}\n\nfunction _warnIfAnonymous(id, url): void {\n  if (id.startsWith('@anonymous/')) {\n    console.warn(\n      `You are not currently signed in to Expo on your development machine. As a result, the redirect URL for AuthSession will be \"${url}\". If you are using an OAuth provider that requires whitelisting redirect URLs, we recommend that you do not whitelist this URL -- instead, you should sign in to Expo to acquired a unique redirect URL. Additionally, if you do decide to publish this app using Expo, you will need to register an account to do it.`\n    );\n  }\n}\n\nexport default {\n  dismiss,\n  getRedirectUrl,\n  getStartUrl,\n  getDefaultReturnUrl,\n  get getRedirectUri() {\n    console.warn(\n      'Use AuthSession.getRedirectUrl rather than AuthSession.getRedirectUri (Url instead of Uri)'\n    );\n    return getRedirectUrl;\n  },\n  startAsync,\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}