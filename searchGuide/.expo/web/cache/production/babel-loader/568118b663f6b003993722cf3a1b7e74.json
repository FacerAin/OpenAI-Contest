{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.createAnimatedConcat=createAnimatedConcat;var _classCallCheck2=_interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));var _createClass2=_interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));var _possibleConstructorReturn2=_interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));var _getPrototypeOf2=_interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));var _inherits2=_interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));var _AnimatedNode2=_interopRequireDefault(require(\"./AnimatedNode\"));var _AnimatedBlock=require(\"../core/AnimatedBlock\");var _val=require(\"../val\");var AnimatedConcat=function(_AnimatedNode){(0,_inherits2.default)(AnimatedConcat,_AnimatedNode);function AnimatedConcat(input){var _this;(0,_classCallCheck2.default)(this,AnimatedConcat);_this=(0,_possibleConstructorReturn2.default)(this,(0,_getPrototypeOf2.default)(AnimatedConcat).call(this,{type:'concat',input:input.map(function(n){return n.__nodeID;})},input));_this._input=input;return _this;}(0,_createClass2.default)(AnimatedConcat,[{key:\"__onEvaluate\",value:function __onEvaluate(){return this._input.reduce(function(prev,current){return prev+(0,_val.val)(current);},'');}}]);return AnimatedConcat;}(_AnimatedNode2.default);function createAnimatedConcat(){for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}return new AnimatedConcat(args.map(_AnimatedBlock.adapt));}","map":{"version":3,"sources":["C:/Users/bluej/Desktop/2_2/searchGuide/searchGuide/node_modules/react-native-reanimated/src/core/AnimatedConcat.js"],"names":["AnimatedConcat","input","type","map","n","__nodeID","_input","reduce","prev","current","AnimatedNode","createAnimatedConcat","args","adapt"],"mappings":"wpBAAA,qEACA,oDACA,2B,GAEMA,CAAAA,c,8EACJ,wBAAYC,KAAZ,CAAmB,6DACjB,0GAAM,CAAEC,IAAI,CAAE,QAAR,CAAkBD,KAAK,CAAEA,KAAK,CAACE,GAAN,CAAU,SAAAC,CAAC,QAAIA,CAAAA,CAAC,CAACC,QAAN,EAAX,CAAzB,CAAN,CAA6DJ,KAA7D,GACA,MAAKK,MAAL,CAAcL,KAAd,CAFiB,aAGlB,C,2FAEc,CACb,MAAO,MAAKK,MAAL,CAAYC,MAAZ,CAAmB,SAACC,IAAD,CAAOC,OAAP,QAAmBD,CAAAA,IAAI,CAAG,aAAIC,OAAJ,CAA1B,EAAnB,CAA2D,EAA3D,CAAP,CACD,C,4BAR0BC,sB,EAWtB,QAASC,CAAAA,oBAAT,EAAuC,+BAANC,IAAM,0CAANA,IAAM,wBAC5C,MAAO,IAAIZ,CAAAA,cAAJ,CAAmBY,IAAI,CAACT,GAAL,CAASU,oBAAT,CAAnB,CAAP,CACD","sourcesContent":["import AnimatedNode from './AnimatedNode';\nimport { adapt } from '../core/AnimatedBlock';\nimport { val } from '../val';\n\nclass AnimatedConcat extends AnimatedNode {\n  constructor(input) {\n    super({ type: 'concat', input: input.map(n => n.__nodeID) }, input);\n    this._input = input;\n  }\n\n  __onEvaluate() {\n    return this._input.reduce((prev, current) => prev + val(current), '');\n  }\n}\n\nexport function createAnimatedConcat(...args) {\n  return new AnimatedConcat(args.map(adapt));\n}\n"]},"metadata":{},"sourceType":"script"}