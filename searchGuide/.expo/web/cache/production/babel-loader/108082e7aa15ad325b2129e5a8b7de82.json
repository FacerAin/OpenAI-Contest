{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.processFontFamily=processFontFamily;exports.isLoaded=isLoaded;exports.isLoading=isLoading;exports.loadAsync=loadAsync;var _regenerator=_interopRequireDefault(require(\"@babel/runtime/regenerator\"));var _expoAsset=require(\"expo-asset\");var _expoConstants=_interopRequireDefault(require(\"expo-constants\"));var _core=require(\"@unimodules/core\");var _ExpoFontLoader=_interopRequireDefault(require(\"./ExpoFontLoader\"));var isWeb=_core.Platform.OS==='web';var isInClient=!isWeb&&_expoConstants.default.appOwnership==='expo';var isInIOSStandalone=_expoConstants.default.appOwnership==='standalone'&&_core.Platform.OS==='ios';var loaded={};var loadPromises={};function fontFamilyNeedsScoping(name){return(isInClient||isInIOSStandalone)&&!_expoConstants.default.systemFonts.includes(name)&&name!=='System'&&!name.includes(_expoConstants.default.sessionId);}function processFontFamily(name){if(!name||!fontFamilyNeedsScoping(name)){return name;}if(!isLoaded(name)){if(__DEV__){if(isLoading(name)){console.error(\"You started loading the font \\\"\"+name+\"\\\", but used it before it finished loading.\\n\\n- You need to wait for Font.loadAsync to complete before using the font.\\n\\n- We recommend loading all fonts before rendering the app, and rendering only Expo.AppLoading while waiting for loading to complete.\");}else{console.error(\"fontFamily \\\"\"+name+\"\\\" is not a system font and has not been loaded through Font.loadAsync.\\n\\n- If you intended to use a system font, make sure you typed the name correctly and that it is supported by your device operating system.\\n\\n- If this is a custom font, be sure to load it with Font.loadAsync.\");}}return'System';}return\"ExpoFont-\"+_getNativeFontName(name);}function isLoaded(name){return loaded.hasOwnProperty(name);}function isLoading(name){return loadPromises.hasOwnProperty(name);}function loadAsync(nameOrMap,source){var fontMap,names,name,asset;return _regenerator.default.async(function loadAsync$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:if(!(typeof nameOrMap==='object')){_context2.next=6;break;}fontMap=nameOrMap;names=Object.keys(fontMap);_context2.next=5;return _regenerator.default.awrap(Promise.all(names.map(function(name){return loadAsync(name,fontMap[name]);})));case 5:return _context2.abrupt(\"return\");case 6:name=nameOrMap;if(!loaded[name]){_context2.next=9;break;}return _context2.abrupt(\"return\");case 9:if(!loadPromises[name]){_context2.next=11;break;}return _context2.abrupt(\"return\",loadPromises[name]);case 11:if(source){_context2.next=13;break;}throw new Error(\"No source from which to load font \\\"\"+name+\"\\\"\");case 13:asset=_getAssetForSource(source);loadPromises[name]=function _callee(){return _regenerator.default.async(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return _regenerator.default.awrap(_loadSingleFontAsync(name,asset));case 3:loaded[name]=true;case 4:_context.prev=4;delete loadPromises[name];return _context.finish(4);case 7:case\"end\":return _context.stop();}}},null,null,[[0,,4,7]]);}();_context2.next=17;return _regenerator.default.awrap(loadPromises[name]);case 17:case\"end\":return _context2.stop();}}});}function _getAssetForSource(source){if(source instanceof _expoAsset.Asset){return source;}if(!isWeb&&typeof source==='string'){return _expoAsset.Asset.fromURI(source);}if(isWeb||typeof source==='number'){return _expoAsset.Asset.fromModule(source);}return source;}function _loadSingleFontAsync(name,asset){return _regenerator.default.async(function _loadSingleFontAsync$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.next=2;return _regenerator.default.awrap(asset.downloadAsync());case 2:if(asset.downloaded){_context3.next=4;break;}throw new Error(\"Failed to download asset for font \\\"\"+name+\"\\\"\");case 4:_context3.next=6;return _regenerator.default.awrap(_ExpoFontLoader.default.loadAsync(_getNativeFontName(name),asset.localUri));case 6:case\"end\":return _context3.stop();}}});}function _getNativeFontName(name){if(fontFamilyNeedsScoping(name)){return _expoConstants.default.sessionId+\"-\"+name;}else{return name;}}if(module&&module.exports){var wasImportWarningShown=false;Object.defineProperty(exports,'Font',{get:function get(){if(!wasImportWarningShown){console.warn(\"The syntax \\\"import { Font } from 'expo-font'\\\" is deprecated. Use \\\"import * as Font from 'expo-font'\\\" or import named exports instead. Support for the old syntax will be removed in SDK 33.\");wasImportWarningShown=true;}return{processFontFamily:processFontFamily,isLoaded:isLoaded,isLoading:isLoading,loadAsync:loadAsync};}});}","map":{"version":3,"sources":["../src/Font.ts"],"names":[],"mappings":"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","sourcesContent":["import { Asset } from 'expo-asset';\nimport Constants from 'expo-constants';\nimport { Platform } from '@unimodules/core';\n\nimport ExpoFontLoader from './ExpoFontLoader';\n\n/**\n * A font source can be a URI, a module ID, or an Expo Asset.\n */\ntype FontSource = string | number | Asset;\n\nconst isWeb = Platform.OS === 'web';\nconst isInClient = !isWeb && Constants.appOwnership === 'expo';\nconst isInIOSStandalone = Constants.appOwnership === 'standalone' && Platform.OS === 'ios';\n\nconst loaded: { [name: string]: boolean } = {};\nconst loadPromises: { [name: string]: Promise<void> } = {};\n\nfunction fontFamilyNeedsScoping(name: string): boolean {\n  return (\n    (isInClient || isInIOSStandalone) &&\n    !Constants.systemFonts.includes(name) &&\n    name !== 'System' &&\n    !name.includes(Constants.sessionId)\n  );\n}\n\n/**\n * Used to transform font family names to the scoped name. This does not need to\n * be called in standalone or bare apps but it will return unscoped font family\n * names if it is called in those contexts.\n * note(brentvatne): at some point we may want to warn if this is called\n * outside of a managed app.\n */\nexport function processFontFamily(name: string | null): string | null {\n  if (!name || !fontFamilyNeedsScoping(name)) {\n    return name;\n  }\n\n  if (!isLoaded(name)) {\n    if (__DEV__) {\n      if (isLoading(name)) {\n        console.error(\n          `You started loading the font \"${name}\", but used it before it finished loading.\\n\n- You need to wait for Font.loadAsync to complete before using the font.\\n\n- We recommend loading all fonts before rendering the app, and rendering only Expo.AppLoading while waiting for loading to complete.`\n        );\n      } else {\n        console.error(\n          `fontFamily \"${name}\" is not a system font and has not been loaded through Font.loadAsync.\\n\n- If you intended to use a system font, make sure you typed the name correctly and that it is supported by your device operating system.\\n\n- If this is a custom font, be sure to load it with Font.loadAsync.`\n        );\n      }\n    }\n\n    return 'System';\n  }\n\n  return `ExpoFont-${_getNativeFontName(name)}`;\n}\n\nexport function isLoaded(name: string): boolean {\n  return loaded.hasOwnProperty(name);\n}\n\nexport function isLoading(name: string): boolean {\n  return loadPromises.hasOwnProperty(name);\n}\n\nexport async function loadAsync(\n  nameOrMap: string | { [name: string]: FontSource },\n  source?: FontSource\n): Promise<void> {\n  if (typeof nameOrMap === 'object') {\n    const fontMap = nameOrMap;\n    const names = Object.keys(fontMap);\n    await Promise.all(names.map(name => loadAsync(name, fontMap[name])));\n    return;\n  }\n\n  const name = nameOrMap;\n\n  if (loaded[name]) {\n    return;\n  }\n\n  if (loadPromises[name]) {\n    return loadPromises[name];\n  }\n\n  // Important: we want all callers that concurrently try to load the same font to await the same\n  // promise. If we're here, we haven't created the promise yet. To ensure we create only one\n  // promise in the program, we need to create the promise synchronously without yielding the event\n  // loop from this point.\n\n  if (!source) {\n    throw new Error(`No source from which to load font \"${name}\"`);\n  }\n  const asset = _getAssetForSource(source);\n  loadPromises[name] = (async () => {\n    try {\n      await _loadSingleFontAsync(name, asset);\n      loaded[name] = true;\n    } finally {\n      delete loadPromises[name];\n    }\n  })();\n\n  await loadPromises[name];\n}\n\nfunction _getAssetForSource(source: FontSource): Asset {\n  if (source instanceof Asset) {\n    return source;\n  }\n\n  if (!isWeb && typeof source === 'string') {\n    return Asset.fromURI(source);\n  }\n\n  if (isWeb || typeof source === 'number') {\n    return Asset.fromModule(source);\n  }\n\n  // @ts-ignore Error: Type 'string' is not assignable to type 'Asset'\n  // We can't have a string here, we would have thrown an error if !isWeb\n  // or returned Asset.fromModule if isWeb.\n  return source;\n}\n\nasync function _loadSingleFontAsync(name: string, asset: Asset): Promise<void> {\n  await asset.downloadAsync();\n  if (!asset.downloaded) {\n    throw new Error(`Failed to download asset for font \"${name}\"`);\n  }\n  await ExpoFontLoader.loadAsync(_getNativeFontName(name), asset.localUri);\n}\n\nfunction _getNativeFontName(name: string): string {\n  if (fontFamilyNeedsScoping(name)) {\n    return `${Constants.sessionId}-${name}`;\n  } else {\n    return name;\n  }\n}\n\ndeclare var module: any;\n\nif (module && module.exports) {\n  let wasImportWarningShown = false;\n  // @ts-ignore: Temporarily define an export named \"Font\" for legacy compatibility\n  Object.defineProperty(exports, 'Font', {\n    get() {\n      if (!wasImportWarningShown) {\n        console.warn(\n          `The syntax \"import { Font } from 'expo-font'\" is deprecated. Use \"import * as Font from 'expo-font'\" or import named exports instead. Support for the old syntax will be removed in SDK 33.`\n        );\n        wasImportWarningShown = true;\n      }\n      return {\n        processFontFamily,\n        isLoaded,\n        isLoading,\n        loadAsync,\n      };\n    },\n  });\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}