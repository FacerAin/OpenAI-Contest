{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=void 0;var _regenerator=_interopRequireDefault(require(\"@babel/runtime/regenerator\"));var _defineProperty2=_interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));var _expoConstants=_interopRequireDefault(require(\"expo-constants\"));var _qs=_interopRequireDefault(require(\"qs\"));var _LinkingModule=_interopRequireDefault(require(\"./LinkingModule\"));function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(source,true).forEach(function(key){(0,_defineProperty2.default)(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(source).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}var manifest=_expoConstants.default.manifest;var USES_CUSTOM_SCHEME=_expoConstants.default.appOwnership==='standalone'&&manifest.scheme;var HOST_URI=manifest.hostUri;if(!HOST_URI&&!USES_CUSTOM_SCHEME){HOST_URI=_removeScheme(_expoConstants.default.linkingUri).replace(/\\/--($|\\/.*$)/,'');}var IS_EXPO_HOSTED=HOST_URI&&(/^(.*\\.)?(expo\\.io|exp\\.host|exp\\.direct|expo\\.test)(:.*)?(\\/.*)?$/.test(HOST_URI)||manifest.developer);function _removeScheme(url){return url.replace(/^[a-zA-Z0-9+.-]+:\\/\\//,'');}function _removePort(url){return url.replace(/(?=([a-zA-Z0-9+.-]+:\\/\\/)?[^/]):\\d+/,'');}function _removeLeadingSlash(url){return url.replace(/^\\//,'');}function _removeTrailingSlash(url){return url.replace(/\\/$/,'');}function _removeTrailingSlashAndQueryString(url){return url.replace(/\\/?\\?.*$/,'');}function makeUrl(){var path=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'';var queryParams=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};var scheme='exp';if(_expoConstants.default.appOwnership==='standalone'){scheme=manifest.scheme||manifest.detach&&manifest.detach.scheme;}if(!scheme){throw new Error('Cannot make a deep link into a standalone app with no custom scheme defined');}var hostUri=HOST_URI||'';if(USES_CUSTOM_SCHEME&&IS_EXPO_HOSTED){hostUri='';}if(path){if(IS_EXPO_HOSTED&&hostUri){path=\"/--/\"+_removeLeadingSlash(path);}if(!path.startsWith('/')&&hostUri){path=\"/\"+path;}else if(path.startsWith('/')&&!hostUri){path=path.substr(1);}}else{path='';}var queryString='';var queryStringMatchResult=hostUri.match(/(.*)\\?(.+)/);if(queryStringMatchResult){hostUri=queryStringMatchResult[1];queryString=queryStringMatchResult[2];var paramsFromHostUri={};try{var parsedParams=_qs.default.parse(queryString);if(typeof parsedParams==='object'){paramsFromHostUri=parsedParams;}}catch(e){}queryParams=_objectSpread({},queryParams,{},paramsFromHostUri);}queryString=_qs.default.stringify(queryParams);if(queryString){queryString=\"?\"+queryString;}hostUri=_removeTrailingSlash(hostUri);return encodeURI(scheme+\"://\"+hostUri+path+queryString);}function parse(url){if(!url){throw new Error('parse cannot be called with a null value');}var decodedUrl=_removePort(decodeURI(url));var path;var queryParams={};var queryStringMatchResult=decodedUrl.match(/(.*)\\?(.+)/);if(queryStringMatchResult){decodedUrl=queryStringMatchResult[1];queryParams=_qs.default.parse(queryStringMatchResult[2]);}var hostUri=HOST_URI||'';var hostUriStripped=_removePort(_removeTrailingSlashAndQueryString(hostUri));if(hostUriStripped&&decodedUrl.indexOf(hostUriStripped)>-1){path=decodedUrl.substr(decodedUrl.indexOf(hostUriStripped)+hostUriStripped.length);}else{path=_removeScheme(decodedUrl);}path=_removeLeadingSlash(path);if(IS_EXPO_HOSTED&&!USES_CUSTOM_SCHEME&&path.startsWith('--/')){path=path.substr(3);}else if(path.indexOf('+')>-1){path=path.substr(path.indexOf('+')+1);}return{path:path,queryParams:queryParams};}function parseInitialURLAsync(){var initialUrl;return _regenerator.default.async(function parseInitialURLAsync$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return _regenerator.default.awrap(_LinkingModule.default.getInitialURL());case 2:initialUrl=_context.sent;if(initialUrl){_context.next=5;break;}return _context.abrupt(\"return\",{path:null,queryParams:null});case 5:return _context.abrupt(\"return\",parse(initialUrl));case 6:case\"end\":return _context.stop();}}});}var newLinking=new _LinkingModule.default.constructor();newLinking.makeUrl=makeUrl;newLinking.parse=parse;newLinking.parseInitialURLAsync=parseInitialURLAsync;var _default=newLinking;exports.default=_default;","map":{"version":3,"sources":["../../src/Linking/Linking.ts"],"names":[],"mappings":"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","sourcesContent":["import Constants from 'expo-constants';\nimport qs from 'qs';\n\nimport { ParsedURL } from './Linking.types';\nimport Linking from './LinkingModule';\n\nconst { manifest } = Constants;\n\nconst USES_CUSTOM_SCHEME = Constants.appOwnership === 'standalone' && manifest.scheme;\n\nlet HOST_URI = manifest.hostUri;\nif (!HOST_URI && !USES_CUSTOM_SCHEME) {\n  // we're probably not using up-to-date xdl, so just fake it for now\n  // we have to remove the /--/ on the end since this will be inserted again later\n  HOST_URI = _removeScheme(Constants.linkingUri).replace(/\\/--($|\\/.*$)/, '');\n}\nconst IS_EXPO_HOSTED =\n  HOST_URI &&\n  (/^(.*\\.)?(expo\\.io|exp\\.host|exp\\.direct|expo\\.test)(:.*)?(\\/.*)?$/.test(HOST_URI) ||\n    manifest.developer);\n\nfunction _removeScheme(url) {\n  return url.replace(/^[a-zA-Z0-9+.-]+:\\/\\//, '');\n}\n\nfunction _removePort(url) {\n  return url.replace(/(?=([a-zA-Z0-9+.-]+:\\/\\/)?[^/]):\\d+/, '');\n}\n\nfunction _removeLeadingSlash(url) {\n  return url.replace(/^\\//, '');\n}\n\nfunction _removeTrailingSlash(url) {\n  return url.replace(/\\/$/, '');\n}\n\nfunction _removeTrailingSlashAndQueryString(url) {\n  return url.replace(/\\/?\\?.*$/, '');\n}\n\nfunction makeUrl(path: string = '', queryParams: Object = {}): string {\n  let scheme = 'exp';\n  if (Constants.appOwnership === 'standalone') {\n    scheme = manifest.scheme || (manifest.detach && manifest.detach.scheme);\n  }\n  if (!scheme) {\n    throw new Error('Cannot make a deep link into a standalone app with no custom scheme defined');\n  }\n\n  let hostUri = HOST_URI || '';\n  if (USES_CUSTOM_SCHEME && IS_EXPO_HOSTED) {\n    hostUri = '';\n  }\n\n  if (path) {\n    if (IS_EXPO_HOSTED && hostUri) {\n      path = `/--/${_removeLeadingSlash(path)}`;\n    }\n\n    if (!path.startsWith('/') && hostUri) {\n      path = `/${path}`;\n    } else if (path.startsWith('/') && !hostUri) {\n      path = path.substr(1);\n    }\n  } else {\n    path = '';\n  }\n\n  // merge user-provided query params with any that were already in the hostUri\n  // e.g. release-channel\n  let queryString = '';\n  let queryStringMatchResult = hostUri.match(/(.*)\\?(.+)/);\n  if (queryStringMatchResult) {\n    hostUri = queryStringMatchResult[1];\n    queryString = queryStringMatchResult[2];\n    let paramsFromHostUri = {};\n    try {\n      let parsedParams = qs.parse(queryString);\n      if (typeof parsedParams === 'object') {\n        paramsFromHostUri = parsedParams;\n      }\n    } catch (e) {}\n    queryParams = {\n      ...queryParams,\n      ...paramsFromHostUri,\n    };\n  }\n  queryString = qs.stringify(queryParams);\n  if (queryString) {\n    queryString = `?${queryString}`;\n  }\n\n  hostUri = _removeTrailingSlash(hostUri);\n\n  return encodeURI(`${scheme}://${hostUri}${path}${queryString}`);\n}\n\nfunction parse(url: string): ParsedURL {\n  if (!url) {\n    throw new Error('parse cannot be called with a null value');\n  }\n  // iOS client sometimes strips out the port from the initial URL\n  // even when it's included in the hostUri.\n  // This function should be able to handle both cases, so we strip off the port\n  // both here and from the hostUri.\n  let decodedUrl = _removePort(decodeURI(url));\n  let path: string;\n  let queryParams = {};\n\n  let queryStringMatchResult = decodedUrl.match(/(.*)\\?(.+)/);\n  if (queryStringMatchResult) {\n    decodedUrl = queryStringMatchResult[1];\n    queryParams = qs.parse(queryStringMatchResult[2]);\n  }\n\n  // strip off the hostUri from the host and path\n  let hostUri = HOST_URI || '';\n  let hostUriStripped = _removePort(_removeTrailingSlashAndQueryString(hostUri));\n  if (hostUriStripped && decodedUrl.indexOf(hostUriStripped) > -1) {\n    path = decodedUrl.substr(decodedUrl.indexOf(hostUriStripped) + hostUriStripped.length);\n  } else {\n    path = _removeScheme(decodedUrl);\n  }\n\n  path = _removeLeadingSlash(path);\n\n  if (IS_EXPO_HOSTED && !USES_CUSTOM_SCHEME && path.startsWith('--/')) {\n    path = path.substr(3);\n  } else if (path.indexOf('+') > -1) {\n    path = path.substr(path.indexOf('+') + 1);\n  }\n\n  return { path, queryParams };\n}\n\nasync function parseInitialURLAsync(): Promise<ParsedURL> {\n  const initialUrl = await Linking.getInitialURL();\n  if (!initialUrl) {\n    return {\n      path: null,\n      queryParams: null,\n    };\n  }\n\n  return parse(initialUrl);\n}\n\n// @ts-ignore fix this...\nlet newLinking = new Linking.constructor();\n\nnewLinking.makeUrl = makeUrl;\nnewLinking.parse = parse;\nnewLinking.parseInitialURLAsync = parseInitialURLAsync;\n\nexport default newLinking;\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}