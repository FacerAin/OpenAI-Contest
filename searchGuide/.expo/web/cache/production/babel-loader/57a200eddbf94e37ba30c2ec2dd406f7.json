{"ast":null,"code":"var _interopRequireWildcard=require(\"@babel/runtime/helpers/interopRequireWildcard\");var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=void 0;var _toConsumableArray2=_interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));var _objectSpread2=_interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));var _invariant=_interopRequireDefault(require(\"../utils/invariant\"));var _getScreenForRouteName=_interopRequireDefault(require(\"./getScreenForRouteName\"));var _createConfigGetter=_interopRequireDefault(require(\"./createConfigGetter\"));var NavigationActions=_interopRequireWildcard(require(\"../NavigationActions\"));var SwitchActions=_interopRequireWildcard(require(\"./SwitchActions\"));var _validateRouteConfigMap=_interopRequireDefault(require(\"./validateRouteConfigMap\"));var _pathUtils=require(\"./pathUtils\");var defaultActionCreators=function defaultActionCreators(){return{};};var _default=function _default(routeConfigs){var config=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};(0,_validateRouteConfigMap.default)(routeConfigs);var order=config.order||Object.keys(routeConfigs);var getCustomActionCreators=config.getCustomActionCreators||defaultActionCreators;var initialRouteParams=config.initialRouteParams;var initialRouteName=config.initialRouteName||order[0];var backBehavior=config.backBehavior||'none';var resetOnBlur=config.hasOwnProperty('resetOnBlur')?config.resetOnBlur:true;var initialRouteIndex=order.indexOf(initialRouteName);if(initialRouteIndex===-1){throw new Error(\"Invalid initialRouteName '\"+initialRouteName+\"'.\"+(\"Should be one of \"+order.map(function(n){return\"\\\"\"+n+\"\\\"\";}).join(', ')));}var childRouters={};order.forEach(function(routeName){childRouters[routeName]=null;var screen=(0,_getScreenForRouteName.default)(routeConfigs,routeName);if(screen.router){childRouters[routeName]=screen.router;}});function getParamsForRoute(routeName,params){var routeConfig=routeConfigs[routeName];if(routeConfig&&routeConfig.params){return(0,_objectSpread2.default)({},routeConfig.params,params);}else{return params;}}var _createPathParser=(0,_pathUtils.createPathParser)(childRouters,routeConfigs,config),getPathAndParamsForRoute=_createPathParser.getPathAndParamsForRoute,_getActionForPathAndParams=_createPathParser.getActionForPathAndParams;function resetChildRoute(routeName){var initialParams=routeName===initialRouteName?initialRouteParams:undefined;var params=getParamsForRoute(routeName,initialParams);var childRouter=childRouters[routeName];if(childRouter){var childAction=NavigationActions.init();return(0,_objectSpread2.default)({},childRouter.getStateForAction(childAction),{key:routeName,routeName:routeName,params:params});}return{key:routeName,routeName:routeName,params:params};}function getNextState(action,prevState,possibleNextState){function updateNextStateHistory(nextState){if(backBehavior!=='history'){return nextState;}var nextRouteKeyHistory=prevState?prevState.routeKeyHistory:[];if(action.type===NavigationActions.NAVIGATE){nextRouteKeyHistory=(0,_toConsumableArray2.default)(nextRouteKeyHistory);var keyToAdd=nextState.routes[nextState.index].key;nextRouteKeyHistory=nextRouteKeyHistory.filter(function(k){return k!==keyToAdd;});nextRouteKeyHistory.push(keyToAdd);}else if(action.type===NavigationActions.BACK){nextRouteKeyHistory=(0,_toConsumableArray2.default)(nextRouteKeyHistory);nextRouteKeyHistory.pop();}return(0,_objectSpread2.default)({},nextState,{routeKeyHistory:nextRouteKeyHistory});}var nextState=possibleNextState;if(prevState&&prevState.index!==possibleNextState.index&&resetOnBlur){var prevRouteName=prevState.routes[prevState.index].routeName;var nextRoutes=(0,_toConsumableArray2.default)(possibleNextState.routes);nextRoutes[prevState.index]=resetChildRoute(prevRouteName);nextState=(0,_objectSpread2.default)({},possibleNextState,{routes:nextRoutes});}return updateNextStateHistory(nextState);}function getInitialState(){var routes=order.map(resetChildRoute);var initialState={routes:routes,index:initialRouteIndex,isTransitioning:false};if(backBehavior==='history'){var initialKey=routes[initialRouteIndex].key;initialState['routeKeyHistory']=[initialKey];}return initialState;}return{childRouters:childRouters,getActionCreators:function getActionCreators(route,stateKey){return getCustomActionCreators(route,stateKey);},getStateForAction:function getStateForAction(action,inputState){var prevState=inputState?(0,_objectSpread2.default)({},inputState):inputState;var state=inputState||getInitialState();var activeChildIndex=state.index;if(action.type===NavigationActions.INIT){var params=action.params;if(params){state.routes=state.routes.map(function(route){return(0,_objectSpread2.default)({},route,{params:(0,_objectSpread2.default)({},route.params,params,route.routeName===initialRouteName?initialRouteParams:null)});});}}if(action.type===SwitchActions.JUMP_TO&&(action.key==null||action.key===state.key)){var _params=action.params;var _index=state.routes.findIndex(function(route){return route.routeName===action.routeName;});if(_index===-1){throw new Error(\"There is no route named '\"+action.routeName+\"' in the navigator with the key '\"+action.key+\"'.\\n\"+(\"Must be one of: \"+state.routes.map(function(route){return\"'\"+route.routeName+\"'\";}).join(',')));}return getNextState(action,prevState,(0,_objectSpread2.default)({},state,{routes:_params?state.routes.map(function(route,i){return i===_index?(0,_objectSpread2.default)({},route,{params:(0,_objectSpread2.default)({},route.params,_params)}):route;}):state.routes,index:_index}));}var activeChildLastState=state.routes[state.index];var activeChildRouter=childRouters[order[state.index]];if(activeChildRouter){var activeChildState=activeChildRouter.getStateForAction(action,activeChildLastState);if(!activeChildState&&inputState){return null;}if(activeChildState&&activeChildState!==activeChildLastState){var _routes=(0,_toConsumableArray2.default)(state.routes);_routes[state.index]=activeChildState;return getNextState(action,prevState,(0,_objectSpread2.default)({},state,{routes:_routes}));}}var isBackEligible=action.key==null||action.key===activeChildLastState.key;if(action.type===NavigationActions.BACK){if(isBackEligible&&backBehavior==='initialRoute'){activeChildIndex=initialRouteIndex;}else if(isBackEligible&&backBehavior==='order'){activeChildIndex=Math.max(0,activeChildIndex-1);}else if(isBackEligible&&backBehavior==='history'&&state.routeKeyHistory.length>1){var routeKey=state.routeKeyHistory[state.routeKeyHistory.length-2];activeChildIndex=order.indexOf(routeKey);}else{return state;}}var didNavigate=false;if(action.type===NavigationActions.NAVIGATE){didNavigate=!!order.find(function(childId,i){if(childId===action.routeName){activeChildIndex=i;return true;}return false;});if(didNavigate){var childState=state.routes[activeChildIndex];var childRouter=childRouters[action.routeName];var newChildState=childState;if(action.action&&childRouter){var childStateUpdate=childRouter.getStateForAction(action.action,childState);if(childStateUpdate){newChildState=childStateUpdate;}}if(action.params){newChildState=(0,_objectSpread2.default)({},newChildState,{params:(0,_objectSpread2.default)({},newChildState.params||{},action.params)});}if(newChildState!==childState){var _routes2=(0,_toConsumableArray2.default)(state.routes);_routes2[activeChildIndex]=newChildState;var nextState=(0,_objectSpread2.default)({},state,{routes:_routes2,index:activeChildIndex});return getNextState(action,prevState,nextState);}else if(newChildState===childState&&state.index===activeChildIndex&&prevState){return null;}}}if(action.type===NavigationActions.SET_PARAMS){var key=action.key;var lastRoute=state.routes.find(function(route){return route.key===key;});if(lastRoute){var _params2=(0,_objectSpread2.default)({},lastRoute.params,action.params);var _routes3=(0,_toConsumableArray2.default)(state.routes);_routes3[state.routes.indexOf(lastRoute)]=(0,_objectSpread2.default)({},lastRoute,{params:_params2});return getNextState(action,prevState,(0,_objectSpread2.default)({},state,{routes:_routes3}));}}if(activeChildIndex!==state.index){return getNextState(action,prevState,(0,_objectSpread2.default)({},state,{index:activeChildIndex}));}else if(didNavigate&&!inputState){return state;}else if(didNavigate){return(0,_objectSpread2.default)({},state);}var index=state.index;var routes=state.routes;order.find(function(childId,i){var childRouter=childRouters[childId];if(i===index){return false;}var childState=routes[i];if(childRouter){childState=childRouter.getStateForAction(action,childState);}if(!childState){index=i;return true;}if(childState!==routes[i]){routes=(0,_toConsumableArray2.default)(routes);routes[i]=childState;index=i;return true;}return false;});if(action.preserveFocus){index=state.index;}if(index!==state.index||routes!==state.routes){return getNextState(action,prevState,(0,_objectSpread2.default)({},state,{index:index,routes:routes}));}return state;},getComponentForState:function getComponentForState(state){var routeName=state.routes[state.index].routeName;(0,_invariant.default)(routeName,\"There is no route defined for index \"+state.index+\". Check that\\n        that you passed in a navigation state with a valid tab/screen index.\");var childRouter=childRouters[routeName];if(childRouter){return childRouter.getComponentForState(state.routes[state.index]);}return(0,_getScreenForRouteName.default)(routeConfigs,routeName);},getComponentForRouteName:function getComponentForRouteName(routeName){return(0,_getScreenForRouteName.default)(routeConfigs,routeName);},getPathAndParamsForState:function getPathAndParamsForState(state){var route=state.routes[state.index];return getPathAndParamsForRoute(route);},getActionForPathAndParams:function getActionForPathAndParams(path,params){return _getActionForPathAndParams(path,params);},getScreenOptions:(0,_createConfigGetter.default)(routeConfigs,config.defaultNavigationOptions)};};exports.default=_default;","map":{"version":3,"sources":["SwitchRouter.js"],"names":["defaultActionCreators","config","validateRouteConfigMap","order","Object","getCustomActionCreators","initialRouteParams","initialRouteName","backBehavior","resetOnBlur","initialRouteIndex","childRouters","screen","getScreenForRouteName","routeConfig","routeConfigs","getPathAndParamsForRoute","getActionForPathAndParams","createPathParser","initialParams","routeName","params","getParamsForRoute","childRouter","childAction","NavigationActions","key","nextRouteKeyHistory","prevState","action","keyToAdd","nextState","k","routeKeyHistory","possibleNextState","prevRouteName","nextRoutes","resetChildRoute","routes","updateNextStateHistory","initialState","index","isTransitioning","initialKey","getActionCreators","getStateForAction","inputState","state","getInitialState","activeChildIndex","route","SwitchActions","getNextState","i","activeChildLastState","activeChildRouter","activeChildState","isBackEligible","Math","routeKey","didNavigate","childId","childState","newChildState","childStateUpdate","lastRoute","getComponentForState","invariant","getComponentForRouteName","getPathAndParamsForState","getScreenOptions","createConfigGetter"],"mappings":"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","sourcesContent":["import invariant from '../utils/invariant';\nimport getScreenForRouteName from './getScreenForRouteName';\nimport createConfigGetter from './createConfigGetter';\n\nimport * as NavigationActions from '../NavigationActions';\nimport * as SwitchActions from './SwitchActions';\nimport validateRouteConfigMap from './validateRouteConfigMap';\nimport { createPathParser } from './pathUtils';\n\nconst defaultActionCreators = () => ({});\n\nexport default (routeConfigs, config = {}) => {\n  // Fail fast on invalid route definitions\n  validateRouteConfigMap(routeConfigs);\n\n  const order = config.order || Object.keys(routeConfigs);\n\n  const getCustomActionCreators =\n    config.getCustomActionCreators || defaultActionCreators;\n\n  const initialRouteParams = config.initialRouteParams;\n  const initialRouteName = config.initialRouteName || order[0];\n  const backBehavior = config.backBehavior || 'none';\n  const resetOnBlur = config.hasOwnProperty('resetOnBlur')\n    ? config.resetOnBlur\n    : true;\n\n  const initialRouteIndex = order.indexOf(initialRouteName);\n  if (initialRouteIndex === -1) {\n    throw new Error(\n      `Invalid initialRouteName '${initialRouteName}'.` +\n        `Should be one of ${order.map(n => `\"${n}\"`).join(', ')}`\n    );\n  }\n\n  const childRouters = {};\n  order.forEach(routeName => {\n    childRouters[routeName] = null;\n    const screen = getScreenForRouteName(routeConfigs, routeName);\n    if (screen.router) {\n      childRouters[routeName] = screen.router;\n    }\n  });\n\n  function getParamsForRoute(routeName, params) {\n    let routeConfig = routeConfigs[routeName];\n    if (routeConfig && routeConfig.params) {\n      return { ...routeConfig.params, ...params };\n    } else {\n      return params;\n    }\n  }\n\n  const {\n    getPathAndParamsForRoute,\n    getActionForPathAndParams,\n  } = createPathParser(childRouters, routeConfigs, config);\n\n  function resetChildRoute(routeName) {\n    let initialParams =\n      routeName === initialRouteName ? initialRouteParams : undefined;\n    // note(brentvatne): merging initialRouteParams *on top* of default params\n    // on the route seems incorrect but it's consistent with existing behavior\n    // in stackrouter\n    let params = getParamsForRoute(routeName, initialParams);\n    const childRouter = childRouters[routeName];\n    if (childRouter) {\n      const childAction = NavigationActions.init();\n      return {\n        ...childRouter.getStateForAction(childAction),\n        key: routeName,\n        routeName,\n        params,\n      };\n    }\n    return {\n      key: routeName,\n      routeName,\n      params,\n    };\n  }\n\n  function getNextState(action, prevState, possibleNextState) {\n    function updateNextStateHistory(nextState) {\n      if (backBehavior !== 'history') {\n        return nextState;\n      }\n      let nextRouteKeyHistory = prevState ? prevState.routeKeyHistory : [];\n      if (action.type === NavigationActions.NAVIGATE) {\n        nextRouteKeyHistory = [...nextRouteKeyHistory]; // copy\n        const keyToAdd = nextState.routes[nextState.index].key;\n        nextRouteKeyHistory = nextRouteKeyHistory.filter(k => k !== keyToAdd); // dedup\n        nextRouteKeyHistory.push(keyToAdd);\n      } else if (action.type === NavigationActions.BACK) {\n        nextRouteKeyHistory = [...nextRouteKeyHistory]; // copy\n        nextRouteKeyHistory.pop();\n      }\n      return {\n        ...nextState,\n        routeKeyHistory: nextRouteKeyHistory,\n      };\n    }\n\n    let nextState = possibleNextState;\n    if (\n      prevState &&\n      prevState.index !== possibleNextState.index &&\n      resetOnBlur\n    ) {\n      const prevRouteName = prevState.routes[prevState.index].routeName;\n      const nextRoutes = [...possibleNextState.routes];\n      nextRoutes[prevState.index] = resetChildRoute(prevRouteName);\n      nextState = {\n        ...possibleNextState,\n        routes: nextRoutes,\n      };\n    }\n    return updateNextStateHistory(nextState);\n  }\n\n  function getInitialState() {\n    const routes = order.map(resetChildRoute);\n    const initialState = {\n      routes,\n      index: initialRouteIndex,\n      isTransitioning: false,\n    };\n    if (backBehavior === 'history') {\n      const initialKey = routes[initialRouteIndex].key;\n      initialState['routeKeyHistory'] = [initialKey];\n    }\n    return initialState;\n  }\n\n  return {\n    childRouters,\n\n    getActionCreators(route, stateKey) {\n      return getCustomActionCreators(route, stateKey);\n    },\n\n    getStateForAction(action, inputState) {\n      let prevState = inputState ? { ...inputState } : inputState;\n      let state = inputState || getInitialState();\n      let activeChildIndex = state.index;\n\n      if (action.type === NavigationActions.INIT) {\n        // NOTE(brentvatne): this seems weird... why are we merging these\n        // params into child routes?\n        // ---------------------------------------------------------------\n        // Merge any params from the action into all the child routes\n        const { params } = action;\n        if (params) {\n          state.routes = state.routes.map(route => ({\n            ...route,\n            params: {\n              ...route.params,\n              ...params,\n              ...(route.routeName === initialRouteName\n                ? initialRouteParams\n                : null),\n            },\n          }));\n        }\n      }\n\n      if (\n        action.type === SwitchActions.JUMP_TO &&\n        (action.key == null || action.key === state.key)\n      ) {\n        const { params } = action;\n        const index = state.routes.findIndex(\n          route => route.routeName === action.routeName\n        );\n\n        if (index === -1) {\n          throw new Error(\n            `There is no route named '${\n              action.routeName\n            }' in the navigator with the key '${action.key}'.\\n` +\n              `Must be one of: ${state.routes\n                .map(route => `'${route.routeName}'`)\n                .join(',')}`\n          );\n        }\n\n        return getNextState(action, prevState, {\n          ...state,\n          routes: params\n            ? state.routes.map((route, i) =>\n                i === index\n                  ? {\n                      ...route,\n                      params: {\n                        ...route.params,\n                        ...params,\n                      },\n                    }\n                  : route\n              )\n            : state.routes,\n          index,\n        });\n      }\n\n      // Let the current child handle it\n      const activeChildLastState = state.routes[state.index];\n      const activeChildRouter = childRouters[order[state.index]];\n      if (activeChildRouter) {\n        const activeChildState = activeChildRouter.getStateForAction(\n          action,\n          activeChildLastState\n        );\n        if (!activeChildState && inputState) {\n          return null;\n        }\n        if (activeChildState && activeChildState !== activeChildLastState) {\n          const routes = [...state.routes];\n          routes[state.index] = activeChildState;\n          return getNextState(action, prevState, {\n            ...state,\n            routes,\n          });\n        }\n      }\n\n      // Handle tab changing. Do this after letting the current tab try to\n      // handle the action, to allow inner children to change first\n      const isBackEligible =\n        action.key == null || action.key === activeChildLastState.key;\n      if (action.type === NavigationActions.BACK) {\n        if (isBackEligible && backBehavior === 'initialRoute') {\n          activeChildIndex = initialRouteIndex;\n        } else if (isBackEligible && backBehavior === 'order') {\n          activeChildIndex = Math.max(0, activeChildIndex - 1);\n        }\n        // The history contains current route, so we can only go back\n        // if there is more than one item in the history\n        else if (\n          isBackEligible &&\n          backBehavior === 'history' &&\n          state.routeKeyHistory.length > 1\n        ) {\n          const routeKey =\n            state.routeKeyHistory[state.routeKeyHistory.length - 2];\n          activeChildIndex = order.indexOf(routeKey);\n        } else {\n          return state;\n        }\n      }\n\n      let didNavigate = false;\n      if (action.type === NavigationActions.NAVIGATE) {\n        didNavigate = !!order.find((childId, i) => {\n          if (childId === action.routeName) {\n            activeChildIndex = i;\n            return true;\n          }\n          return false;\n        });\n        if (didNavigate) {\n          const childState = state.routes[activeChildIndex];\n          const childRouter = childRouters[action.routeName];\n          let newChildState = childState;\n\n          if (action.action && childRouter) {\n            const childStateUpdate = childRouter.getStateForAction(\n              action.action,\n              childState\n            );\n            if (childStateUpdate) {\n              newChildState = childStateUpdate;\n            }\n          }\n\n          if (action.params) {\n            newChildState = {\n              ...newChildState,\n              params: {\n                ...(newChildState.params || {}),\n                ...action.params,\n              },\n            };\n          }\n\n          if (newChildState !== childState) {\n            const routes = [...state.routes];\n            routes[activeChildIndex] = newChildState;\n            const nextState = {\n              ...state,\n              routes,\n              index: activeChildIndex,\n            };\n            return getNextState(action, prevState, nextState);\n          } else if (\n            newChildState === childState &&\n            state.index === activeChildIndex &&\n            prevState\n          ) {\n            return null;\n          }\n        }\n      }\n\n      if (action.type === NavigationActions.SET_PARAMS) {\n        const key = action.key;\n        const lastRoute = state.routes.find(route => route.key === key);\n        if (lastRoute) {\n          const params = {\n            ...lastRoute.params,\n            ...action.params,\n          };\n          const routes = [...state.routes];\n          routes[state.routes.indexOf(lastRoute)] = {\n            ...lastRoute,\n            params,\n          };\n          return getNextState(action, prevState, {\n            ...state,\n            routes,\n          });\n        }\n      }\n\n      if (activeChildIndex !== state.index) {\n        return getNextState(action, prevState, {\n          ...state,\n          index: activeChildIndex,\n        });\n      } else if (didNavigate && !inputState) {\n        return state;\n      } else if (didNavigate) {\n        return { ...state };\n      }\n\n      // Let other children handle it and switch to the first child that returns a new state\n      let index = state.index;\n      let routes = state.routes;\n      order.find((childId, i) => {\n        const childRouter = childRouters[childId];\n        if (i === index) {\n          return false;\n        }\n        let childState = routes[i];\n        if (childRouter) {\n          childState = childRouter.getStateForAction(action, childState);\n        }\n        if (!childState) {\n          index = i;\n          return true;\n        }\n        if (childState !== routes[i]) {\n          routes = [...routes];\n          routes[i] = childState;\n          index = i;\n          return true;\n        }\n        return false;\n      });\n\n      // Nested routers can be updated after switching children with actions such as SET_PARAMS\n      // and COMPLETE_TRANSITION.\n      if (action.preserveFocus) {\n        index = state.index;\n      }\n\n      if (index !== state.index || routes !== state.routes) {\n        return getNextState(action, prevState, {\n          ...state,\n          index,\n          routes,\n        });\n      }\n      return state;\n    },\n\n    getComponentForState(state) {\n      const routeName = state.routes[state.index].routeName;\n      invariant(\n        routeName,\n        `There is no route defined for index ${state.index}. Check that\n        that you passed in a navigation state with a valid tab/screen index.`\n      );\n      const childRouter = childRouters[routeName];\n      if (childRouter) {\n        return childRouter.getComponentForState(state.routes[state.index]);\n      }\n      return getScreenForRouteName(routeConfigs, routeName);\n    },\n\n    getComponentForRouteName(routeName) {\n      return getScreenForRouteName(routeConfigs, routeName);\n    },\n\n    getPathAndParamsForState(state) {\n      const route = state.routes[state.index];\n      return getPathAndParamsForRoute(route);\n    },\n\n    getActionForPathAndParams(path, params) {\n      return getActionForPathAndParams(path, params);\n    },\n\n    getScreenOptions: createConfigGetter(\n      routeConfigs,\n      config.defaultNavigationOptions\n    ),\n  };\n};\n"]},"metadata":{},"sourceType":"script"}