{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=overlay;var _color=_interopRequireDefault(require(\"color\"));var _Animated=_interopRequireDefault(require(\"react-native-web/dist/exports/Animated\"));var _DarkTheme=_interopRequireDefault(require(\"./DarkTheme\"));function overlay(){var elevation=arguments.length>0&&arguments[0]!==undefined?arguments[0]:1;var surfaceColor=arguments.length>1&&arguments[1]!==undefined?arguments[1]:_DarkTheme.default.colors.surface;if(elevation instanceof _Animated.default.Value){var inputRange=[0,1,2,3,8,24];return elevation.interpolate({inputRange:inputRange,outputRange:inputRange.map(function(elevation){return calculateColor(surfaceColor,elevation);})});}return calculateColor(surfaceColor,elevation);}function calculateColor(surfaceColor,elevation){var overlayTransparency;if(elevation>=1&&elevation<=24){overlayTransparency=elevationOverlayTransparency[elevation];}else if(elevation>24){overlayTransparency=elevationOverlayTransparency[24];}else{overlayTransparency=elevationOverlayTransparency[1];}return(0,_color.default)(surfaceColor).mix((0,_color.default)('white'),overlayTransparency*0.01).hex();}var elevationOverlayTransparency={1:5,2:7,3:8,4:9,5:10,6:11,7:11.5,8:12,9:12.5,10:13,11:13.5,12:14,13:14.25,14:14.5,15:14.75,16:15,17:15.12,18:15.24,19:15.36,20:15.48,21:15.6,22:15.72,23:15.84,24:16};","map":{"version":3,"sources":["overlay.tsx"],"names":["elevation","surfaceColor","DarkTheme","surface","Animated","inputRange","outputRange","calculateColor","overlayTransparency","elevationOverlayTransparency","color"],"mappings":"oKAAA,oD,wFAEA,8DAEe,QAAA,CAAA,OAAA,EAGb,CAFAA,GAAAA,CAAAA,SAEA,CAAA,SAAA,CAAA,MAAA,CAAA,CAAA,EAAA,SAAA,CAAA,CAAA,CAAA,GAAA,SAAA,CAAA,SAAA,CAAA,CAAA,CAAA,CAFqC,CAArCA,CACAC,GAAAA,CAAAA,YACA,CAAA,SAAA,CAAA,MAAA,CAAA,CAAA,EAAA,SAAA,CAAA,CAAA,CAAA,GAAA,SAAA,CAAA,SAAA,CAAA,CAAA,CAAA,CADuBC,mBAAAA,MAAAA,CAAiBC,OAAxCF,CAEA,GAAID,SAAS,WAAYI,mBAAzB,KAAA,CAAyC,CACvC,GAAMC,CAAAA,UAAU,CAAG,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAnB,EAAmB,CAAnB,CACA,MAAOL,CAAAA,SAAS,CAATA,WAAAA,CAAsB,CAC3BK,UAAU,CADiB,UAAA,CAE3BC,WAAW,CAAED,UAAU,CAAVA,GAAAA,CAAe,SAAA,SAAA,CAAa,CACvC,MAAOE,CAAAA,cAAc,CAAA,YAAA,CAArB,SAAqB,CAArB,CAHJ,CAEeF,CAFc,CAAtBL,CAAP,CAOF,OAAOO,CAAAA,cAAc,CAAA,YAAA,CAArB,SAAqB,CAArB,CAEF,SAAA,CAAA,cAAA,CAAA,YAAA,CAAA,SAAA,CAAiE,CAC/D,GAAA,CAAA,mBAAA,CACA,GAAIP,SAAS,EAATA,CAAAA,EAAkBA,SAAS,EAA/B,EAAA,CAAuC,CACrCQ,mBAAmB,CAAGC,4BAA4B,CAAlDD,SAAkD,CAAlDA,CADF,CAAA,IAEO,IAAIR,SAAS,CAAb,EAAA,CAAoB,CACzBQ,mBAAmB,CAAGC,4BAA4B,CAAlDD,EAAkD,CAAlDA,CADK,CAAA,IAEA,CACLA,mBAAmB,CAAGC,4BAA4B,CAAlDD,CAAkD,CAAlDA,CAEF,OAAOE,mBAAAA,YAAAA,EAAAA,GAAAA,CACAA,mBADAA,OACAA,CADAA,CACgBF,mBAAmB,CADnCE,IAAAA,EAAP,GAAOA,EAAP,CAIF,IAAMD,CAAAA,4BAAsD,CAAG,CAC7D,EAD6D,CAAA,CAE7D,EAF6D,CAAA,CAG7D,EAH6D,CAAA,CAI7D,EAJ6D,CAAA,CAK7D,EAL6D,EAAA,CAM7D,EAN6D,EAAA,CAO7D,EAP6D,IAAA,CAQ7D,EAR6D,EAAA,CAS7D,EAT6D,IAAA,CAU7D,GAV6D,EAAA,CAW7D,GAX6D,IAAA,CAY7D,GAZ6D,EAAA,CAa7D,GAb6D,KAAA,CAc7D,GAd6D,IAAA,CAe7D,GAf6D,KAAA,CAgB7D,GAhB6D,EAAA,CAiB7D,GAjB6D,KAAA,CAkB7D,GAlB6D,KAAA,CAmB7D,GAnB6D,KAAA,CAoB7D,GApB6D,KAAA,CAqB7D,GArB6D,IAAA,CAsB7D,GAtB6D,KAAA,CAuB7D,GAvB6D,KAAA,CAwB7D,GAxBF,EAA+D,CAA/D","sourcesContent":["import color from 'color';\nimport { Animated } from 'react-native';\nimport DarkTheme from './DarkTheme';\n\nexport default function overlay(\n  elevation: number | Animated.Value = 1,\n  surfaceColor: string = DarkTheme.colors.surface\n) {\n  if (elevation instanceof Animated.Value) {\n    const inputRange = [0, 1, 2, 3, 8, 24];\n    return elevation.interpolate({\n      inputRange,\n      outputRange: inputRange.map(elevation => {\n        return calculateColor(surfaceColor, elevation);\n      }),\n    });\n  }\n  return calculateColor(surfaceColor, elevation);\n}\nfunction calculateColor(surfaceColor: string, elevation: number) {\n  let overlayTransparency: number;\n  if (elevation >= 1 && elevation <= 24) {\n    overlayTransparency = elevationOverlayTransparency[elevation];\n  } else if (elevation > 24) {\n    overlayTransparency = elevationOverlayTransparency[24];\n  } else {\n    overlayTransparency = elevationOverlayTransparency[1];\n  }\n  return color(surfaceColor)\n    .mix(color('white'), overlayTransparency * 0.01)\n    .hex();\n}\nconst elevationOverlayTransparency: { [id: number]: number } = {\n  1: 5,\n  2: 7,\n  3: 8,\n  4: 9,\n  5: 10,\n  6: 11,\n  7: 11.5,\n  8: 12,\n  9: 12.5,\n  10: 13,\n  11: 13.5,\n  12: 14,\n  13: 14.25,\n  14: 14.5,\n  15: 14.75,\n  16: 15,\n  17: 15.12,\n  18: 15.24,\n  19: 15.36,\n  20: 15.48,\n  21: 15.6,\n  22: 15.72,\n  23: 15.84,\n  24: 16,\n};\n"]},"metadata":{},"sourceType":"script"}