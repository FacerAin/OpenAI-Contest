{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.allow=allow;exports.allowAsync=allowAsync;exports.lockAsync=lockAsync;exports.lockPlatformAsync=lockPlatformAsync;exports.unlockAsync=unlockAsync;exports.getOrientationAsync=getOrientationAsync;exports.getOrientationLockAsync=getOrientationLockAsync;exports.getPlatformOrientationLockAsync=getPlatformOrientationLockAsync;exports.supportsOrientationLockAsync=supportsOrientationLockAsync;exports.doesSupportAsync=doesSupportAsync;exports.addOrientationChangeListener=addOrientationChangeListener;exports.removeOrientationChangeListeners=removeOrientationChangeListeners;exports.removeOrientationChangeListener=removeOrientationChangeListener;Object.defineProperty(exports,\"Orientation\",{enumerable:true,get:function get(){return _ScreenOrientation.Orientation;}});Object.defineProperty(exports,\"OrientationLock\",{enumerable:true,get:function get(){return _ScreenOrientation.OrientationLock;}});Object.defineProperty(exports,\"SizeClassIOS\",{enumerable:true,get:function get(){return _ScreenOrientation.SizeClassIOS;}});Object.defineProperty(exports,\"WebOrientationLock\",{enumerable:true,get:function get(){return _ScreenOrientation.WebOrientationLock;}});var _slicedToArray2=_interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));var _regenerator=_interopRequireDefault(require(\"@babel/runtime/regenerator\"));var _core=require(\"@unimodules/core\");var _ExpoScreenOrientation=_interopRequireDefault(require(\"./ExpoScreenOrientation\"));var _ScreenOrientation=require(\"./ScreenOrientation.types\");var _orientationChangeEmitter=new _core.EventEmitter(_ExpoScreenOrientation.default);var _orientationChangeSubscribers=[];var _lastOrientationLock=_ScreenOrientation.OrientationLock.UNKNOWN;function allow(orientationLock){console.warn(\"'ScreenOrientation.allow' is deprecated in favour of 'ScreenOrientation.lockAsync' and will be removed in SDK 35 or later\");lockAsync(orientationLock);}function allowAsync(orientationLock){return _regenerator.default.async(function allowAsync$(_context){while(1){switch(_context.prev=_context.next){case 0:console.warn(\"'ScreenOrientation.allowAsync' is deprecated in favour of 'ScreenOrientation.lockAsync'\");_context.next=3;return _regenerator.default.awrap(lockAsync(orientationLock));case 3:case\"end\":return _context.stop();}}});}function lockAsync(orientationLock){var orientationLocks;return _regenerator.default.async(function lockAsync$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:if(_ExpoScreenOrientation.default.lockAsync){_context2.next=2;break;}throw new _core.UnavailabilityError('ScreenOrientation','lockAsync');case 2:orientationLocks=Object.values(_ScreenOrientation.OrientationLock);if(orientationLocks.includes(orientationLock)){_context2.next=5;break;}throw new TypeError(\"Invalid Orientation Lock: \"+orientationLock);case 5:if(!(orientationLock===_ScreenOrientation.OrientationLock.OTHER)){_context2.next=7;break;}return _context2.abrupt(\"return\");case 7:_context2.next=9;return _regenerator.default.awrap(_ExpoScreenOrientation.default.lockAsync(orientationLock));case 9:_lastOrientationLock=orientationLock;case 10:case\"end\":return _context2.stop();}}});}function lockPlatformAsync(options){var screenOrientationConstantAndroid,screenOrientationArrayIOS,screenOrientationLockWeb,platformOrientationParam,orientations,_iterator,_isArray,_i,_ref,_orientation,webOrientationLocks;return _regenerator.default.async(function lockPlatformAsync$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:if(_ExpoScreenOrientation.default.lockPlatformAsync){_context3.next=2;break;}throw new _core.UnavailabilityError('ScreenOrientation','lockPlatformAsync');case 2:screenOrientationConstantAndroid=options.screenOrientationConstantAndroid,screenOrientationArrayIOS=options.screenOrientationArrayIOS,screenOrientationLockWeb=options.screenOrientationLockWeb;if(!(_core.Platform.OS==='android'&&screenOrientationConstantAndroid)){_context3.next=9;break;}if(!isNaN(screenOrientationConstantAndroid)){_context3.next=6;break;}throw new TypeError(\"lockPlatformAsync Android platform: screenOrientationConstantAndroid cannot be called with \"+screenOrientationConstantAndroid);case 6:platformOrientationParam=screenOrientationConstantAndroid;_context3.next=37;break;case 9:if(!(_core.Platform.OS==='ios'&&screenOrientationArrayIOS)){_context3.next=32;break;}if(Array.isArray(screenOrientationArrayIOS)){_context3.next=12;break;}throw new TypeError(\"lockPlatformAsync iOS platform: screenOrientationArrayIOS cannot be called with \"+screenOrientationArrayIOS);case 12:orientations=Object.values(_ScreenOrientation.Orientation);_iterator=screenOrientationArrayIOS,_isArray=Array.isArray(_iterator),_i=0,_iterator=_isArray?_iterator:_iterator[typeof Symbol===\"function\"?typeof Symbol===\"function\"?Symbol.iterator:\"@@iterator\":\"@@iterator\"]();case 14:if(!_isArray){_context3.next=20;break;}if(!(_i>=_iterator.length)){_context3.next=17;break;}return _context3.abrupt(\"break\",29);case 17:_ref=_iterator[_i++];_context3.next=24;break;case 20:_i=_iterator.next();if(!_i.done){_context3.next=23;break;}return _context3.abrupt(\"break\",29);case 23:_ref=_i.value;case 24:_orientation=_ref;if(orientations.includes(_orientation)){_context3.next=27;break;}throw new TypeError(\"lockPlatformAsync iOS platform: \"+_orientation+\" is not a valid Orientation\");case 27:_context3.next=14;break;case 29:platformOrientationParam=screenOrientationArrayIOS;_context3.next=37;break;case 32:if(!(_core.Platform.OS==='web'&&screenOrientationLockWeb)){_context3.next=37;break;}webOrientationLocks=Object.values(_ScreenOrientation.WebOrientationLock);if(webOrientationLocks.includes(screenOrientationLockWeb)){_context3.next=36;break;}throw new TypeError(\"Invalid Web Orientation Lock: \"+screenOrientationLockWeb);case 36:platformOrientationParam=screenOrientationLockWeb;case 37:if(platformOrientationParam){_context3.next=39;break;}throw new TypeError('lockPlatformAsync cannot be called with undefined option properties');case 39:_context3.next=41;return _regenerator.default.awrap(_ExpoScreenOrientation.default.lockPlatformAsync(platformOrientationParam));case 41:_lastOrientationLock=_ScreenOrientation.OrientationLock.OTHER;case 42:case\"end\":return _context3.stop();}}});}function unlockAsync(){return _regenerator.default.async(function unlockAsync$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:if(_ExpoScreenOrientation.default.unlockAsync){_context4.next=2;break;}throw new _core.UnavailabilityError('ScreenOrientation','unlockAsync');case 2:_context4.next=4;return _regenerator.default.awrap(_ExpoScreenOrientation.default.unlockAsync());case 4:case\"end\":return _context4.stop();}}});}function getOrientationAsync(){return _regenerator.default.async(function getOrientationAsync$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:if(_ExpoScreenOrientation.default.getOrientationAsync){_context5.next=2;break;}throw new _core.UnavailabilityError('ScreenOrientation','getOrientationAsync');case 2:_context5.next=4;return _regenerator.default.awrap(_ExpoScreenOrientation.default.getOrientationAsync());case 4:return _context5.abrupt(\"return\",_context5.sent);case 5:case\"end\":return _context5.stop();}}});}function getOrientationLockAsync(){return _regenerator.default.async(function getOrientationLockAsync$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:if(_ExpoScreenOrientation.default.getOrientationLockAsync){_context6.next=2;break;}return _context6.abrupt(\"return\",_lastOrientationLock);case 2:_context6.next=4;return _regenerator.default.awrap(_ExpoScreenOrientation.default.getOrientationLockAsync());case 4:return _context6.abrupt(\"return\",_context6.sent);case 5:case\"end\":return _context6.stop();}}});}function getPlatformOrientationLockAsync(){var platformOrientationLock;return _regenerator.default.async(function getPlatformOrientationLockAsync$(_context7){while(1){switch(_context7.prev=_context7.next){case 0:_context7.next=2;return _regenerator.default.awrap(_ExpoScreenOrientation.default.getPlatformOrientationLockAsync());case 2:platformOrientationLock=_context7.sent;if(!(_core.Platform.OS==='android')){_context7.next=7;break;}return _context7.abrupt(\"return\",{screenOrientationConstantAndroid:platformOrientationLock});case 7:if(!(_core.Platform.OS==='ios')){_context7.next=11;break;}return _context7.abrupt(\"return\",{screenOrientationArrayIOS:platformOrientationLock});case 11:if(!(_core.Platform.OS==='web')){_context7.next=15;break;}return _context7.abrupt(\"return\",{screenOrientationLockWeb:platformOrientationLock});case 15:return _context7.abrupt(\"return\",{});case 16:case\"end\":return _context7.stop();}}});}function supportsOrientationLockAsync(orientationLock){var orientationLocks;return _regenerator.default.async(function supportsOrientationLockAsync$(_context8){while(1){switch(_context8.prev=_context8.next){case 0:if(_ExpoScreenOrientation.default.supportsOrientationLockAsync){_context8.next=2;break;}throw new _core.UnavailabilityError('ScreenOrientation','supportsOrientationLockAsync');case 2:orientationLocks=Object.values(_ScreenOrientation.OrientationLock);if(orientationLocks.includes(orientationLock)){_context8.next=5;break;}throw new TypeError(\"Invalid Orientation Lock: \"+orientationLock);case 5:_context8.next=7;return _regenerator.default.awrap(_ExpoScreenOrientation.default.supportsOrientationLockAsync(orientationLock));case 7:return _context8.abrupt(\"return\",_context8.sent);case 8:case\"end\":return _context8.stop();}}});}function doesSupportAsync(orientationLock){return _regenerator.default.async(function doesSupportAsync$(_context9){while(1){switch(_context9.prev=_context9.next){case 0:console.warn(\"'ScreenOrientation.doesSupportAsync' is deprecated in favour of 'ScreenOrientation.supportsOrientationLockAsync'\");_context9.next=3;return _regenerator.default.awrap(supportsOrientationLockAsync(orientationLock));case 3:return _context9.abrupt(\"return\",_context9.sent);case 4:case\"end\":return _context9.stop();}}});}function getEventName(){return _core.Platform.OS==='ios'||_core.Platform.OS==='web'?'expoDidUpdateDimensions':'didUpdateDimensions';}function addOrientationChangeListener(listener){if(typeof listener!=='function'){throw new TypeError(\"addOrientationChangeListener cannot be called with \"+listener);}var subscription=_orientationChangeEmitter.addListener(getEventName(),function _callee(update){var orientationInfo,orientationLock,_ref2,_ref3;return _regenerator.default.async(function _callee$(_context10){while(1){switch(_context10.prev=_context10.next){case 0:if(!(_core.Platform.OS==='ios'||_core.Platform.OS==='web')){_context10.next=5;break;}orientationLock=update.orientationLock;orientationInfo=update.orientationInfo;_context10.next=11;break;case 5:_context10.next=7;return _regenerator.default.awrap(Promise.all([getOrientationLockAsync(),getOrientationAsync()]));case 7:_ref2=_context10.sent;_ref3=(0,_slicedToArray2.default)(_ref2,2);orientationLock=_ref3[0];orientationInfo=_ref3[1];case 11:listener({orientationInfo:orientationInfo,orientationLock:orientationLock});case 12:case\"end\":return _context10.stop();}}});});_orientationChangeSubscribers.push(subscription);return subscription;}function removeOrientationChangeListeners(){var i=_orientationChangeSubscribers.length;while(i--){var subscriber=_orientationChangeSubscribers[i];subscriber.remove();_orientationChangeSubscribers.pop();}}function removeOrientationChangeListener(subscription){if(!subscription||!subscription.remove){throw new TypeError(\"Must pass in a valid subscription\");}subscription.remove();_orientationChangeSubscribers=_orientationChangeSubscribers.filter(function(sub){return sub!==subscription;});}","map":{"version":3,"sources":["../../src/ScreenOrientation/ScreenOrientation.ts"],"names":[],"mappings":"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","sourcesContent":["import { EventEmitter, Platform, Subscription, UnavailabilityError } from '@unimodules/core';\n\nimport ExpoScreenOrientation from './ExpoScreenOrientation';\nimport {\n  Orientation,\n  OrientationChangeEvent,\n  OrientationChangeListener,\n  OrientationInfo,\n  OrientationLock,\n  PlatformOrientationInfo,\n  SizeClassIOS,\n  WebOrientationLock,\n} from './ScreenOrientation.types';\n\nexport {\n  Orientation,\n  OrientationLock,\n  SizeClassIOS,\n  OrientationInfo,\n  PlatformOrientationInfo,\n  OrientationChangeListener,\n  OrientationChangeEvent,\n  WebOrientationLock,\n};\n\nconst _orientationChangeEmitter = new EventEmitter(ExpoScreenOrientation);\nlet _orientationChangeSubscribers: Subscription[] = [];\n\nlet _lastOrientationLock: OrientationLock = OrientationLock.UNKNOWN;\n\nexport function allow(orientationLock: OrientationLock): void {\n  console.warn(\n    \"'ScreenOrientation.allow' is deprecated in favour of 'ScreenOrientation.lockAsync' and will be removed in SDK 35 or later\"\n  );\n  lockAsync(orientationLock);\n}\n\nexport async function allowAsync(orientationLock: OrientationLock): Promise<void> {\n  console.warn(\n    \"'ScreenOrientation.allowAsync' is deprecated in favour of 'ScreenOrientation.lockAsync'\"\n  );\n  await lockAsync(orientationLock);\n}\n\nexport async function lockAsync(orientationLock: OrientationLock): Promise<void> {\n  if (!ExpoScreenOrientation.lockAsync) {\n    throw new UnavailabilityError('ScreenOrientation', 'lockAsync');\n  }\n\n  const orientationLocks = Object.values(OrientationLock);\n  if (!orientationLocks.includes(orientationLock)) {\n    throw new TypeError(`Invalid Orientation Lock: ${orientationLock}`);\n  }\n\n  if (orientationLock === OrientationLock.OTHER) {\n    return;\n  }\n\n  await ExpoScreenOrientation.lockAsync(orientationLock);\n  _lastOrientationLock = orientationLock;\n}\n\nexport async function lockPlatformAsync(options: PlatformOrientationInfo): Promise<void> {\n  if (!ExpoScreenOrientation.lockPlatformAsync) {\n    throw new UnavailabilityError('ScreenOrientation', 'lockPlatformAsync');\n  }\n\n  const {\n    screenOrientationConstantAndroid,\n    screenOrientationArrayIOS,\n    screenOrientationLockWeb,\n  } = options;\n  let platformOrientationParam: any;\n  if (Platform.OS === 'android' && screenOrientationConstantAndroid) {\n    if (isNaN(screenOrientationConstantAndroid)) {\n      throw new TypeError(\n        `lockPlatformAsync Android platform: screenOrientationConstantAndroid cannot be called with ${screenOrientationConstantAndroid}`\n      );\n    }\n    platformOrientationParam = screenOrientationConstantAndroid;\n  } else if (Platform.OS === 'ios' && screenOrientationArrayIOS) {\n    if (!Array.isArray(screenOrientationArrayIOS)) {\n      throw new TypeError(\n        `lockPlatformAsync iOS platform: screenOrientationArrayIOS cannot be called with ${screenOrientationArrayIOS}`\n      );\n    }\n\n    const orientations = Object.values(Orientation);\n    for (let orientation of screenOrientationArrayIOS) {\n      if (!orientations.includes(orientation)) {\n        throw new TypeError(\n          `lockPlatformAsync iOS platform: ${orientation} is not a valid Orientation`\n        );\n      }\n    }\n    platformOrientationParam = screenOrientationArrayIOS;\n  } else if (Platform.OS === 'web' && screenOrientationLockWeb) {\n    const webOrientationLocks = Object.values(WebOrientationLock);\n    if (!webOrientationLocks.includes(screenOrientationLockWeb)) {\n      throw new TypeError(`Invalid Web Orientation Lock: ${screenOrientationLockWeb}`);\n    }\n    platformOrientationParam = screenOrientationLockWeb;\n  }\n\n  if (!platformOrientationParam) {\n    throw new TypeError('lockPlatformAsync cannot be called with undefined option properties');\n  }\n  await ExpoScreenOrientation.lockPlatformAsync(platformOrientationParam);\n  _lastOrientationLock = OrientationLock.OTHER;\n}\n\nexport async function unlockAsync(): Promise<void> {\n  if (!ExpoScreenOrientation.unlockAsync) {\n    throw new UnavailabilityError('ScreenOrientation', 'unlockAsync');\n  }\n  await ExpoScreenOrientation.unlockAsync();\n}\n\nexport async function getOrientationAsync(): Promise<OrientationInfo> {\n  if (!ExpoScreenOrientation.getOrientationAsync) {\n    throw new UnavailabilityError('ScreenOrientation', 'getOrientationAsync');\n  }\n  return await ExpoScreenOrientation.getOrientationAsync();\n}\n\nexport async function getOrientationLockAsync(): Promise<OrientationLock> {\n  if (!ExpoScreenOrientation.getOrientationLockAsync) {\n    return _lastOrientationLock;\n  }\n  return await ExpoScreenOrientation.getOrientationLockAsync();\n}\n\nexport async function getPlatformOrientationLockAsync(): Promise<PlatformOrientationInfo> {\n  const platformOrientationLock = await ExpoScreenOrientation.getPlatformOrientationLockAsync();\n  if (Platform.OS === 'android') {\n    return {\n      screenOrientationConstantAndroid: platformOrientationLock,\n    };\n  } else if (Platform.OS === 'ios') {\n    return {\n      screenOrientationArrayIOS: platformOrientationLock,\n    };\n  } else if (Platform.OS === 'web') {\n    return {\n      screenOrientationLockWeb: platformOrientationLock,\n    };\n  } else {\n    return {};\n  }\n}\n\nexport async function supportsOrientationLockAsync(\n  orientationLock: OrientationLock\n): Promise<boolean> {\n  if (!ExpoScreenOrientation.supportsOrientationLockAsync) {\n    throw new UnavailabilityError('ScreenOrientation', 'supportsOrientationLockAsync');\n  }\n\n  const orientationLocks = Object.values(OrientationLock);\n  if (!orientationLocks.includes(orientationLock)) {\n    throw new TypeError(`Invalid Orientation Lock: ${orientationLock}`);\n  }\n\n  return await ExpoScreenOrientation.supportsOrientationLockAsync(orientationLock);\n}\n\nexport async function doesSupportAsync(orientationLock: OrientationLock): Promise<boolean> {\n  console.warn(\n    \"'ScreenOrientation.doesSupportAsync' is deprecated in favour of 'ScreenOrientation.supportsOrientationLockAsync'\"\n  );\n  return await supportsOrientationLockAsync(orientationLock);\n}\n\n// Determine the event name lazily so Jest can set up mocks in advance\nfunction getEventName(): string {\n  return Platform.OS === 'ios' || Platform.OS === 'web'\n    ? 'expoDidUpdateDimensions'\n    : 'didUpdateDimensions';\n}\n\n// We rely on RN to emit `didUpdateDimensions`\n// If this method no longer works, it's possible that the underlying RN implementation has changed\n// see https://github.com/facebook/react-native/blob/c31f79fe478b882540d7fd31ee37b53ddbd60a17/ReactAndroid/src/main/java/com/facebook/react/modules/deviceinfo/DeviceInfoModule.java#L90\nexport function addOrientationChangeListener(listener: OrientationChangeListener): Subscription {\n  if (typeof listener !== 'function') {\n    throw new TypeError(`addOrientationChangeListener cannot be called with ${listener}`);\n  }\n  const subscription = _orientationChangeEmitter.addListener(\n    getEventName(),\n    async (update: OrientationChangeEvent) => {\n      let orientationInfo, orientationLock;\n      if (Platform.OS === 'ios' || Platform.OS === 'web') {\n        // For iOS, RN relies on statusBarOrientation (deprecated) to emit `didUpdateDimensions` event, so we emit our own `expoDidUpdateDimensions` event instead\n        orientationLock = update.orientationLock;\n        orientationInfo = update.orientationInfo;\n      } else {\n        // We rely on the RN Dimensions to emit the `didUpdateDimensions` event on Android\n        [orientationLock, orientationInfo] = await Promise.all([\n          getOrientationLockAsync(),\n          getOrientationAsync(),\n        ]);\n      }\n      listener({ orientationInfo, orientationLock });\n    }\n  );\n  _orientationChangeSubscribers.push(subscription);\n  return subscription;\n}\n\n// We need to keep track of our own subscribers because EventEmitter uses a shared subscriber\n// from NativeEventEmitter that is registered to the same eventTypes as us. Directly calling\n// removeAllListeners(eventName) will remove other module's subscribers.\nexport function removeOrientationChangeListeners(): void {\n  // Remove listener by subscription instead of eventType to avoid clobbering Dimension module's subscription of didUpdateDimensions\n  let i = _orientationChangeSubscribers.length;\n  while (i--) {\n    const subscriber = _orientationChangeSubscribers[i];\n    subscriber.remove();\n\n    // remove after a successful unsubscribe\n    _orientationChangeSubscribers.pop();\n  }\n}\n\nexport function removeOrientationChangeListener(subscription: Subscription): void {\n  if (!subscription || !subscription.remove) {\n    throw new TypeError(`Must pass in a valid subscription`);\n  }\n  subscription.remove();\n  _orientationChangeSubscribers = _orientationChangeSubscribers.filter(sub => sub !== subscription);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}