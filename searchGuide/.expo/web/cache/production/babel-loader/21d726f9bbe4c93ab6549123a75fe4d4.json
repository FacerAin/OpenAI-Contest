{"ast":null,"code":"'use strict';var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=void 0;var _propTypes=_interopRequireDefault(require(\"prop-types\"));var ImageURISourcePropType=_propTypes.default.shape({uri:_propTypes.default.string,bundle:_propTypes.default.string,method:_propTypes.default.string,headers:_propTypes.default.objectOf(_propTypes.default.string),body:_propTypes.default.string,cache:_propTypes.default.oneOf(['default','reload','force-cache','only-if-cached']),width:_propTypes.default.number,height:_propTypes.default.number,scale:_propTypes.default.number});var ImageSourcePropType=_propTypes.default.oneOfType([ImageURISourcePropType,_propTypes.default.number,_propTypes.default.string,_propTypes.default.arrayOf(ImageURISourcePropType)]);var _default=ImageSourcePropType;exports.default=_default;","map":{"version":3,"sources":["C:/Users/bluej/Desktop/2_2/searchGuide/searchGuide/node_modules/react-native-web/dist/exports/Image/ImageSourcePropType.js"],"names":["ImageURISourcePropType","PropTypes","shape","uri","string","bundle","method","headers","objectOf","body","cache","oneOf","width","number","height","scale","ImageSourcePropType","oneOfType","arrayOf"],"mappings":"AAQA,a,mKAEA,6DACA,GAAIA,CAAAA,sBAAsB,CAAGC,mBAAUC,KAAV,CAAgB,CAO3CC,GAAG,CAAEF,mBAAUG,MAP4B,CAc3CC,MAAM,CAAEJ,mBAAUG,MAdyB,CAmB3CE,MAAM,CAAEL,mBAAUG,MAnByB,CAyB3CG,OAAO,CAAEN,mBAAUO,QAAV,CAAmBP,mBAAUG,MAA7B,CAzBkC,CAgC3CK,IAAI,CAAER,mBAAUG,MAhC2B,CAsD3CM,KAAK,CAAET,mBAAUU,KAAV,CAAgB,CAAC,SAAD,CAAY,QAAZ,CAAsB,aAAtB,CAAqC,gBAArC,CAAhB,CAtDoC,CA4D3CC,KAAK,CAAEX,mBAAUY,MA5D0B,CA6D3CC,MAAM,CAAEb,mBAAUY,MA7DyB,CAmE3CE,KAAK,CAAEd,mBAAUY,MAnE0B,CAAhB,CAA7B,CAqEA,GAAIG,CAAAA,mBAAmB,CAAGf,mBAAUgB,SAAV,CAAoB,CAACjB,sBAAD,CAC9CC,mBAAUY,MADoC,CAC5BZ,mBAAUG,MADkB,CAE9CH,mBAAUiB,OAAV,CAAkBlB,sBAAlB,CAF8C,CAApB,CAA1B,C,aAGegB,mB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n'use strict';\n\nimport PropTypes from 'prop-types';\nvar ImageURISourcePropType = PropTypes.shape({\n  /**\n   * `uri` is a string representing the resource identifier for the image, which\n   * could be an http address, a local file path, or the name of a static image\n   * resource (which should be wrapped in the `require('./path/to/image.png')`\n   * function).\n   */\n  uri: PropTypes.string,\n\n  /**\n   * `bundle` is the iOS asset bundle which the image is included in. This\n   * will default to [NSBundle mainBundle] if not set.\n   * @platform ios\n   */\n  bundle: PropTypes.string,\n\n  /**\n   * `method` is the HTTP Method to use. Defaults to GET if not specified.\n   */\n  method: PropTypes.string,\n\n  /**\n   * `headers` is an object representing the HTTP headers to send along with the\n   * request for a remote image.\n   */\n  headers: PropTypes.objectOf(PropTypes.string),\n\n  /**\n   * `body` is the HTTP body to send with the request. This must be a valid\n   * UTF-8 string, and will be sent exactly as specified, with no\n   * additional encoding (e.g. URL-escaping or base64) applied.\n   */\n  body: PropTypes.string,\n\n  /**\n   * `cache` determines how the requests handles potentially cached\n   * responses.\n   *\n   * - `default`: Use the native platforms default strategy. `useProtocolCachePolicy` on iOS.\n   *\n   * - `reload`: The data for the URL will be loaded from the originating source.\n   * No existing cache data should be used to satisfy a URL load request.\n   *\n   * - `force-cache`: The existing cached data will be used to satisfy the request,\n   * regardless of its age or expiration date. If there is no existing data in the cache\n   * corresponding the request, the data is loaded from the originating source.\n   *\n   * - `only-if-cached`: The existing cache data will be used to satisfy a request, regardless of\n   * its age or expiration date. If there is no existing data in the cache corresponding\n   * to a URL load request, no attempt is made to load the data from the originating source,\n   * and the load is considered to have failed.\n   *\n   * @platform ios\n   */\n  cache: PropTypes.oneOf(['default', 'reload', 'force-cache', 'only-if-cached']),\n\n  /**\n   * `width` and `height` can be specified if known at build time, in which case\n   * these will be used to set the default `<Image/>` component dimensions.\n   */\n  width: PropTypes.number,\n  height: PropTypes.number,\n\n  /**\n   * `scale` is used to indicate the scale factor of the image. Defaults to 1.0 if\n   * unspecified, meaning that one image pixel equates to one display point / DIP.\n   */\n  scale: PropTypes.number\n});\nvar ImageSourcePropType = PropTypes.oneOfType([ImageURISourcePropType, // Opaque type returned by require('./image.jpg')\nPropTypes.number, PropTypes.string, // Multiple sources\nPropTypes.arrayOf(ImageURISourcePropType)]);\nexport default ImageSourcePropType;"]},"metadata":{},"sourceType":"script"}